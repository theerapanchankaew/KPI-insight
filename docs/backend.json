{
  "entities": {
    "UserProfile": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserProfile",
      "type": "object",
      "description": "Represents a user profile within the KPI dashboard application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user profile entity."
        },
        "name": {
          "type": "string",
          "description": "The full name of the user."
        },
        "email": {
          "type": "string",
          "description": "The email address of the user.",
          "format": "email"
        },
        "ceoName": {
          "type": "string",
          "description": "The name of the CEO, if the user is a CEO."
        },
        "departmentId": {
          "type": "string",
          "description": "Reference to Department. (Relationship: Department 1:N UserProfile)"
        },
        "role": {
          "type": "string",
          "description": "The role of the user within the organization (e.g., CEO, Manager, Employee)."
        }
      },
      "required": [
        "id",
        "name",
        "email",
        "departmentId",
        "role"
      ]
    },
    "Department": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Department",
      "type": "object",
      "description": "Represents a department within the organization.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the department entity."
        },
        "name": {
          "type": "string",
          "description": "The name of the department (e.g., Sales, Operations, Corporate Affairs)."
        },
        "description": {
          "type": "string",
          "description": "A description of the department's function."
        }
      },
      "required": [
        "id",
        "name"
      ]
    },
    "Kpi": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Kpi",
      "type": "object",
      "description": "Represents a Key Performance Indicator.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the KPI entity."
        },
        "name": {
          "type": "string",
          "description": "The name of the KPI (e.g., Monthly Revenue, Customer Acquisition Cost)."
        },
        "description": {
          "type": "string",
          "description": "A description of what the KPI measures."
        },
        "target": {
          "type": "number",
          "description": "The target value for the KPI."
        },
        "unit": {
          "type": "string",
          "description": "The unit of measurement for the KPI (e.g., THB, %, Count)."
        },
        "period": {
          "type": "string",
          "description": "The reporting period for the KPI (e.g., monthly, quarterly, yearly)."
        },
        "departmentId": {
          "type": "string",
          "description": "Reference to Department. (Relationship: Department 1:N Kpi)"
        },
        "kpiCategoryId": {
          "type": "string",
          "description": "Reference to KpiCategory. (Relationship: KpiCategory 1:N Kpi)"
        }
      },
      "required": [
        "id",
        "name",
        "target",
        "unit",
        "period",
        "departmentId",
        "kpiCategoryId"
      ]
    },
    "KpiCategory": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "KpiCategory",
      "type": "object",
      "description": "Represents a category for KPIs.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the KPI Category entity."
        },
        "name": {
          "type": "string",
          "description": "The name of the KPI category (e.g., Financial, Operational, ESG, Customer)."
        }
      },
      "required": [
        "id",
        "name"
      ]
    },
    "KpiSubmission": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "KpiSubmission",
      "type": "object",
      "description": "Represents a submission of KPI data.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the KPI Submission entity."
        },
        "kpiId": {
          "type": "string",
          "description": "Reference to Kpi. (Relationship: Kpi 1:N KpiSubmission)"
        },
        "submittedByUserId": {
          "type": "string",
          "description": "Reference to UserProfile. (Relationship: UserProfile 1:N KpiSubmission)"
        },
        "submissionDate": {
          "type": "string",
          "description": "The date and time when the KPI data was submitted.",
          "format": "date-time"
        },
        "actualValue": {
          "type": "number",
          "description": "The actual value of the KPI for the submission period."
        },
        "status": {
          "type": "string",
          "description": "The status of the KPI submission (e.g., Pending, Approved, Rejected, Draft)."
        },
        "notes": {
          "type": "string",
          "description": "Additional notes or comments related to the KPI submission."
        }
      },
      "required": [
        "id",
        "kpiId",
        "submittedByUserId",
        "submissionDate",
        "actualValue",
        "status"
      ]
    },
    "KpiApproval": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "KpiApproval",
      "type": "object",
      "description": "Represents an approval record for a KPI submission.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the KPI Approval entity."
        },
        "kpiSubmissionId": {
          "type": "string",
          "description": "Reference to KpiSubmission. (Relationship: KpiSubmission 1:N KpiApproval)"
        },
        "approvedByUserId": {
          "type": "string",
          "description": "Reference to UserProfile. (Relationship: UserProfile 1:N KpiApproval)"
        },
        "approvalDate": {
          "type": "string",
          "description": "The date and time when the KPI submission was approved.",
          "format": "date-time"
        },
        "notes": {
          "type": "string",
          "description": "Notes or comments from the approver."
        },
        "status": {
          "type": "string",
          "description": "The approval status (e.g., Approved, Rejected)."
        }
      },
      "required": [
        "id",
        "kpiSubmissionId",
        "approvedByUserId",
        "approvalDate",
        "status"
      ]
    },
    "Report": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Report",
      "type": "object",
      "description": "Represents a performance report.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Report entity."
        },
        "reportPeriod": {
          "type": "string",
          "description": "The period covered by the report (e.g., monthly, quarterly, yearly)."
        },
        "reportDate": {
          "type": "string",
          "description": "The date when the report was generated.",
          "format": "date-time"
        },
        "executiveSummary": {
          "type": "string",
          "description": "A summary of the report's findings (generated by GenAI)."
        },
        "kpiSubmissionIds": {
          "type": "array",
          "description": "References to KpiSubmissions included in this report. (Relationship: Report 1:N KpiSubmission)",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "reportPeriod",
        "reportDate",
        "executiveSummary"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}/profile",
        "definition": {
          "entityName": "UserProfile",
          "schema": {
            "$ref": "#/backend/entities/UserProfile"
          },
          "description": "Stores user profile information. Access is restricted to the user themselves (path-based ownership).",
          "params": [
            {
              "name": "userId",
              "description": "The unique ID of the user."
            }
          ]
        }
      },
      {
        "path": "/departments/{departmentId}",
        "definition": {
          "entityName": "Department",
          "schema": {
            "$ref": "#/backend/entities/Department"
          },
          "description": "Stores department information. Access control can be implemented using security rules based on user roles.",
          "params": [
            {
              "name": "departmentId",
              "description": "The unique ID of the department."
            }
          ]
        }
      },
      {
        "path": "/kpi_categories/{kpiCategoryId}",
        "definition": {
          "entityName": "KpiCategory",
          "schema": {
            "$ref": "#/backend/entities/KpiCategory"
          },
          "description": "Stores KPI category information. Access control can be implemented using security rules.",
          "params": [
            {
              "name": "kpiCategoryId",
              "description": "The unique ID of the KPI category."
            }
          ]
        }
      },
      {
        "path": "/kpis/{kpiId}",
        "definition": {
          "entityName": "Kpi",
          "schema": {
            "$ref": "#/backend/entities/Kpi"
          },
          "description": "Stores KPI information.  Access can be controlled based on user roles and department membership.",
          "params": [
            {
              "name": "kpiId",
              "description": "The unique ID of the KPI."
            }
          ]
        }
      },
      {
        "path": "/kpi_submissions/{kpiSubmissionId}",
        "definition": {
          "entityName": "KpiSubmission",
          "schema": {
            "$ref": "#/backend/entities/KpiSubmission"
          },
          "description": "Stores KPI submission data.  Includes `submittedByUserId` for ownership checks. Consider denormalizing `departmentMembers` map for enhanced authorization independence.",
          "params": [
            {
              "name": "kpiSubmissionId",
              "description": "The unique ID of the KPI submission."
            }
          ]
        }
      },
      {
        "path": "/kpi_approvals/{kpiApprovalId}",
        "definition": {
          "entityName": "KpiApproval",
          "schema": {
            "$ref": "#/backend/entities/KpiApproval"
          },
          "description": "Stores KPI approval records. Includes `approvedByUserId` for tracking approvers.",
          "params": [
            {
              "name": "kpiApprovalId",
              "description": "The unique ID of the KPI approval."
            }
          ]
        }
      },
      {
        "path": "/reports/{reportId}",
        "definition": {
          "entityName": "Report",
          "schema": {
            "$ref": "#/backend/entities/Report"
          },
          "description": "Stores performance reports. Access control can be implemented using security rules.",
          "params": [
            {
              "name": "reportId",
              "description": "The unique ID of the report."
            }
          ]
        }
      }
    ],
    "reasoning": "Based on the provided information, the primary issue is a lack of permissions to `list` users. The suggested data structure addresses this and follows the core design principles and strategy mandates to ensure secure, scalable, and debuggable Firestore rules. Here's a breakdown:\n\n**Justification of the Design:**\n\n1.  **User Profiles**: User profiles are stored under `/users/{userId}/profile`. This adheres to Path-Based ownership and ensures that only the authenticated user (`request.auth.uid`) can read/write their own profile data. It explicitly encodes the authorization intent in the structure.\n\n2.  **Departments**: Departments are stored in a top-level `/departments` collection. No specific ownership is defined, but security rules can be implemented to control who can `create`, `read`, `update`, or `delete` departments (e.g., based on admin roles).\n\n3.  **KPI Categories**: KPI Categories are stored in a top-level `/kpi_categories` collection. As with Departments, security rules can be implemented to manage access.\n\n4.  **KPIs**: KPIs are stored in a top-level `/kpis` collection. This enables efficient querying across all KPIs. The `departmentId` and `kpiCategoryId` fields provide relationships to the respective entities.\n\n5.  **KPI Submissions**: KPI Submissions are stored in a top-level `/kpi_submissions` collection. Each submission includes `kpiId` and `submittedByUserId` for linking to the KPI and the user who submitted it. The `status` field allows for tracking the submission lifecycle.\n\n6.  **KPI Approvals**: KPI Approvals are stored in a top-level `/kpi_approvals` collection. Each approval includes `kpiSubmissionId` and `approvedByUserId` to link the approval to the submission and the approver.\n\n7.  **Reports**: Reports are stored in a top-level `/reports` collection. The `kpiSubmissionIds` array provides a list of related KPI submissions.\n\n**Authorization Independence (Denormalization Strategy):**\n\n*   **User Profiles**: User access is based on `request.auth.uid` matching the `userId` in the path (`/users/{userId}/profile`). No `get()` calls are needed.\n*   **KPI Submissions and Approvals**:  While these are top-level collections, ownership and roles are managed through security rules. For example, a rule can specify that only a user with a specific role (stored in their `/users/{userId}/profile` document) can approve a KPI submission.  The `submittedByUserId` field in `kpi_submissions` enables checking if the current user is the owner.\n*   To further enhance Authorization Independence (and to avoid `get()` calls in the security rules), consider **denormalizing** the department membership or roles directly into the `KpiSubmission` documents. For instance, adding a `departmentMembers` map field in the `KpiSubmission` document to list all users with roles in that department can reduce dependency and increase security.\n\n**QAPs (Rules are not Filters):**\n\n*   The use of top-level collections for KPIs, KPI Submissions, and KPI Approvals allows for efficient querying and listing. Security rules ensure that users can only access the data they are authorized to see.  Since user profiles are path-based, listing user profiles is prevented.\n*   The structure facilitates secure `list` operations by segregating data based on access needs. For example, listing KPIs can be restricted based on the user's role or department (via the `departmentId` field).\n\n**Global Roles (DBAC):**\n\n*   Prefer Existence over Content. Use dedicated collections (e.g., `/roles_admin/{uid}`).\n\n**Addressing the Original Error:**\n\nThe original error indicates a permissions issue when trying to `list` documents in the `/users` collection. The provided structure eliminates the need to list all user documents. User profiles are accessed via path-based ownership (`/users/{userId}/profile`), so there is no need to list the `/users` collection. This enhances security and aligns with the principle of Authorization Independence.\n\n**Important Security Considerations:**\n\n*   **Input Validation:** Implement strict input validation in security rules to prevent malicious data from being written to the database.\n*   **Data Validation:** Consider adding server-side data validation (e.g., using Cloud Functions) to ensure data integrity.\n*   **Auditing:** Implement auditing mechanisms to track data access and modifications for security and compliance purposes."
  }
}