/**
 * @fileOverview Firestore Security Rules for KPI Dashboard Application
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model.
 *  - Authenticated users can generally read non-sensitive data.
 *  - Admins have elevated privileges to manage users and system settings.
 *  - Ownership is enforced for user-specific data.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores individual user profiles, only accessible by the user themselves and admins.
 * - `/employees/{employeeId}`: Stores public employee data, readable by all authenticated users, writable by admins.
 * - `/departments/{departmentId}`: Stores department data, readable by all authenticated users, writable by admins.
 * - `/kpi_categories/{kpiCategoryId}`: Stores KPI category data, readable by all authenticated users, writable by admins.
 * - `/kpi_catalog/{kpiId}`: Stores the master list of all KPIs, readable by all authenticated users, writable by admins.
 * - `/cascaded_kpis/{cascadedKpiId}`: Stores KPIs cascaded to departments, readable by authenticated users, writable by managers/admins.
 * - `/individual_kpis/{individualKpiId}`: Stores KPIs assigned to individual employees, readable by the assigned user and their manager, writable by managers/admins.
 * - `/kpi_submissions/{kpiSubmissionId}`: Stores KPI submission data, readable by the submitter and their manager.
 * - `/kpi_approvals/{kpiApprovalId}`: Stores KPI approval records, readable by involved parties.
 * - `/reports/{reportId}`: Stores performance reports.
 * - `/settings/global`: Stores global application settings, readable by all authenticated users, writable by admins.
 * - `/monthly_kpis/{monthlyKpiId}`: Stores monthly KPI breakdowns, readable by all authenticated users, writable by admins.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied for non-admins to protect user privacy.
 * - Data validation is minimal in this prototype to allow for rapid schema iteration.
 * - Read access is generally open to authenticated users unless specifically restricted.
 *
 * Denormalization for Authorization:
 *  - The `kpi_submissions` documents should include the `submittedByUserId` field, allowing rules to easily check ownership without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user's ID matches the requested user ID.
     * @param {string} userId The user ID to compare against.
     * @returns {boolean} True if the user is signed in and their UID matches the provided userId, false otherwise.
     * @example isOwner("someUserId")
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an admin.
     * @returns {boolean} True if the user is signed in and has the "Admin" role, false otherwise.
     * @example isAdmin()
     */
    function isAdmin() {
      return isSignedIn() && request.auth.token.role == "Admin";
    }

    /**
     * @description Checks if the user is an admin or manager.
     * @returns {boolean} True if the user is signed in and has the "Admin" or "Manager" role, false otherwise.
     */
    function isAdminOrManager() {
        return isSignedIn() && (request.auth.token.role == "Admin" || request.auth.token.role == "Manager");
    }

    /**
     * @description Checks if the user is the owner and the resource exists.
     * @param {string} userId The user ID to compare against.
     * @returns {boolean} True if the user is the owner and the resource exists.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Defines access rules for user profiles.
     * @path /users/{userId}
     * @allow (get, update) User with ID 'user123' can read/write their own profile.
     *     Request: auth.uid = 'user123', method = 'get' or 'update'
     * @allow (create) User with ID 'user123' can create their own profile if the document ID matches their user ID.
     *     Request: auth.uid = 'user123', method = 'create', resource.data.id = 'user123'
     * @allow (list) Admin can list all user profiles.
     *     Request: auth.token.role = 'Admin', method = 'list'
     * @deny (get) User with ID 'user456' cannot read the profile of user 'user123'.
     *     Request: auth.uid = 'user456', method = 'get', path = '/users/user123'
     * @deny (update) User with ID 'user456' cannot update the profile of user 'user123'.
     *     Request: auth.uid = 'user456', method = 'update', path = '/users/user123'
     * @principle Enforces document ownership for writes; restricts listing to admins for privacy.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if isAdmin();
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if false;
    }

    /**
     * @description Defines access rules for employee data.
     * @path /employees/{employeeId}
     * @allow (get, list) Any authenticated user can read employee data.
     *     Request: auth.uid != null, method = 'get' or 'list'
     * @allow (create, update, delete) Only admins can create, update, or delete employee data.
     *     Request: auth.token.role = 'Admin', method = 'create', 'update', or 'delete'
     * @deny (create, update, delete) Non-admin users cannot modify employee data.
     *     Request: auth.token.role != 'Admin', method = 'create', 'update', or 'delete'
     * @principle Allows public read access with admin-only writes.
     */
    match /employees/{employeeId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Defines access rules for department data.
     * @path /departments/{departmentId}
     * @allow (get, list) Any authenticated user can read department data.
     *     Request: auth.uid != null, method = 'get' or 'list'
     * @allow (create, update, delete) Only admins can create, update, or delete department data.
     *     Request: auth.token.role = 'Admin', method = 'create', 'update', or 'delete'
     * @deny (create, update, delete) Non-admin users cannot modify department data.
     *     Request: auth.token.role != 'Admin', method = 'create', 'update', or 'delete'
     * @principle Allows public read access with admin-only writes.
     */
    match /departments/{departmentId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Defines access rules for KPI category data.
     * @path /kpi_categories/{kpiCategoryId}
     * @allow (get, list) Any authenticated user can read KPI category data.
     *     Request: auth.uid != null, method = 'get' or 'list'
     * @allow (create, update, delete) Only admins can create, update, or delete KPI category data.
     *     Request: auth.token.role = 'Admin', method = 'create', 'update', or 'delete'
     * @deny (create, update, delete) Non-admin users cannot modify KPI category data.
     *     Request: auth.token.role != 'Admin', method = 'create', 'update', or 'delete'
     * @principle Allows public read access with admin-only writes.
     */
    match /kpi_categories/{kpiCategoryId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Defines access rules for the KPI catalog.
     * @path /kpi_catalog/{kpiId}
     * @allow (get, list) Any authenticated user can read KPI catalog data.
     *     Request: auth.uid != null, method = 'get' or 'list'
     * @allow (create, update, delete) Only admins can create, update, or delete KPI catalog data.
     *     Request: auth.token.role = 'Admin', method = 'create', 'update', or 'delete'
     * @deny (delete) Non-admin users cannot delete KPI catalog data.
     *     Request: auth.token.role != 'Admin', method = 'create', 'update', or 'delete'
     * @principle Allows public read access with admin-only writes.
     */
    match /kpi_catalog/{kpiId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Defines access rules for cascaded KPIs.
     * @path /cascaded_kpis/{cascadedKpiId}
     * @allow (get, list) Any authenticated user can read cascaded KPI data.
     * @allow (create, update, delete) Only admins or managers can create, update, or delete cascaded KPI data.
     * @principle Allows public read access with manager/admin-only writes.
     */
    match /cascaded_kpis/{cascadedKpiId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdminOrManager();
    }

    /**
     * @description Defines access rules for individual KPIs.
     * @path /individual_kpis/{individualKpiId}
     * @allow get: if isSignedIn(); // TODO: Add logic for assigned user and their manager
     * @allow list: if isSignedIn(); // TODO: Add logic for assigned user and their manager
     * @allow create, update, delete: if isAdminOrManager(); // TODO: Refine write access based on user roles and KPI status
     */
    match /individual_kpis/{individualKpiId} {
      allow get: if isSignedIn();  // TODO: Add logic for assigned user and their manager
      allow list: if isSignedIn(); // TODO: Add logic for assigned user and their manager
      allow create, update, delete: if isAdminOrManager(); // TODO: Refine write access based on user roles and KPI status
    }

    /**
     * @description Defines access rules for KPI submissions.
     * @path /kpi_submissions/{kpiSubmissionId}
     */
    match /kpi_submissions/{kpiSubmissionId} {
      allow get: if isSignedIn(); // TODO: Add logic for submitter and their manager
      allow list: if isSignedIn(); // TODO: Add logic for submitter and their manager
      allow create: if isSignedIn(); // TODO: Add validation
      allow update: if isSignedIn(); // TODO: Add validation
      allow delete: if false;
    }

    /**
     * @description Defines access rules for KPI approvals.
     * @path /kpi_approvals/{kpiApprovalId}
     */
    match /kpi_approvals/{kpiApprovalId} {
      allow get: if isSignedIn(); // TODO: Add logic for involved parties
      allow list: if isSignedIn(); // TODO: Add logic for involved parties
      allow create: if isSignedIn(); // TODO: Add validation
      allow update: if isSignedIn(); // TODO: Add validation
      allow delete: if false;
    }

    /**
     * @description Defines access rules for reports.
     * @path /reports/{reportId}
     */
    match /reports/{reportId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdmin(); // TODO: Refine write access
    }

    /**
     * @description Defines access rules for global settings.
     * @path /settings/global
     */
    match /settings/global {
      allow get: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

      /**
     * @description Defines access rules for Monthly KPIs.
     * @path /monthly_kpis/{monthlyKpiId}
     */
    match /monthly_kpis/{monthlyKpiId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }
  }
}