/**
 * @fileoverview Firestore Security Rules for KPI Dashboard Application
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership, role-based, and public-read/admin-write access control patterns.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible to the user themselves and admins.
 * - /employees/{employeeId}: Public employee data, readable by all authenticated users, writable by admins.
 * - /departments/{departmentId}: Department data, readable by all authenticated users, writable by admins.
 * - /kpi_categories/{kpiCategoryId}: KPI category data, readable by all authenticated users, writable by admins.
 * - /kpi_catalog/{kpiId}: Master list of KPIs, readable by all authenticated users, writable by admins.
 * - /cascaded_kpis/{cascadedKpiId}: KPIs cascaded to departments, readable by all authenticated users, writable by managers/admins.
 * - /individual_kpis/{individualKpiId}: KPIs assigned to individual employees, readable by the assigned user and their manager, writable by manager/admin.
 * - /kpi_submissions/{kpiSubmissionId}: KPI submission data, readable by submitter and their manager.
 * - /kpi_approvals/{kpiApprovalId}: KPI approval records, readable by involved parties.
 * - /reports/{reportId}: Performance reports, access control to be implemented using security rules.
 * - /settings/global: Global application settings, readable by all authenticated users, writable by admins.
 * - /monthly_kpis/{monthlyKpiId}: Monthly breakdown of corporate KPIs, readable by authenticated users, writable by admins.
 *
 * Key Security Decisions:
 * - User profiles are primarily accessible only to the user themselves, with admin override.
 * - Public employee and KPI data is readable by all authenticated users but writable only by admins.
 * - Certain collections intended to be viewed only by certain roles (manager, admins) must be readable by those user.
 *
 * Denormalization for Authorization:
 * - The rules rely on the `auth.uid` to match the `{userId}` parameter in paths like `/users/{userId}` to ensure user-owned data access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile access. Users can only access their own profile. Admins can access all profiles.
     * @path /users/{userId}
     * @allow (get, update, delete) User 'user123' can read/write their own profile: /users/user123
     * @allow (get) Admin can read any user profile: /users/user456
     * @deny (update, delete) User 'user123' attempts to modify another user's profile: /users/user456
     * @deny (list) Listing all users is forbidden.
     * @principle Enforces document ownership for writes, restricts listing, and allows admin overrides for reads.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) ;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages employee data access. Readable by all authenticated users, writable only by admins.
     * @path /employees/{employeeId}
     * @allow (get, list) Any logged-in user can read employee data.
     * @allow (create, update, delete) Only admins can modify employee data.
     * @deny Non-admin user attempts to create, update, or delete employee data.
     * @principle Public read, admin-only write access control.
     */
    match /employees/{employeeId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    /**
     * @description Manages department data access. Readable by all authenticated users, writable only by admins.
     * @path /departments/{departmentId}
     * @allow (get, list) Any logged-in user can read department data.
     * @allow (create, update, delete) Only admins can modify department data.
     * @deny Non-admin user attempts to create, update, or delete department data.
     * @principle Public read, admin-only write access control.
     */
    match /departments/{departmentId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    /**
     * @description Manages KPI category data access. Readable by all authenticated users, writable only by admins.
     * @path /kpi_categories/{kpiCategoryId}
     * @allow (get, list) Any logged-in user can read KPI category data.
     * @allow (create, update, delete) Only admins can modify KPI category data.
     * @deny Non-admin user attempts to create, update, or delete KPI category data.
     * @principle Public read, admin-only write access control.
     */
    match /kpi_categories/{kpiCategoryId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    /**
     * @description Manages KPI data access. Readable by all authenticated users, writable only by admins.
     * @path /kpi_catalog/{kpiId}
     * @allow (get, list) Any logged-in user can read KPI data.
     * @allow (create, update, delete) Only admins can modify KPI data.
     * @deny Non-admin user attempts to create, update, or delete KPI data.
     * @principle Public read, admin-only write access control.
     */
    match /kpi_catalog/{kpiId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    /**
     * @description Manages cascaded KPI data access. Readable by all authenticated users, writable only by managers/admins.
     * @path /cascaded_kpis/{cascadedKpiId}
     * @allow (get, list) Any logged-in user can read cascaded KPI data.
     * @allow (create, update, delete) Only managers or admins can modify cascaded KPI data.
     * @deny Non-manager/admin user attempts to create, update, or delete cascaded KPI data.
     * @principle Public read, role-based write access control.
     */
    match /cascaded_kpis/{cascadedKpiId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && (isManager() || isAdmin());
      allow update: if isSignedIn() && (isManager() || isAdmin()) && resource != null;
      allow delete: if isSignedIn() && (isManager() || isAdmin()) && resource != null;
    }

    /**
     * @description Manages individual KPI data access. Readable by the assigned user and their manager. Writable by manager/admin. Status updatable by employee.
     * @path /individual_kpis/{individualKpiId}
     */
    match /individual_kpis/{individualKpiId} {
        allow get: if isSignedIn() && (isOwner(resource.data.employeeId) || isManager() || isAdmin());
        allow list: if isSignedIn() && (isManager() || isAdmin());
        allow create: if isSignedIn() && (isManager() || isAdmin());
        allow update: if isSignedIn() && (isOwner(resource.data.employeeId) || isManager() || isAdmin()) && resource != null;
        allow delete: if isSignedIn() && (isManager() || isAdmin()) && resource != null;
    }

    /**
     * @description Manages KPI submission data access. Includes `submittedByUserId` for ownership checks. Readable by submitter and their manager.
     * @path /kpi_submissions/{kpiSubmissionId}
     */
    match /kpi_submissions/{kpiSubmissionId} {
        allow get: if isSignedIn() && (isOwner(resource.data.submittedByUserId) || isManager() || isAdmin());
        allow list: if isSignedIn() && (isManager() || isAdmin());
        allow create: if isSignedIn(); // Any signed in user can submit
        allow update: if isSignedIn() && (isOwner(resource.data.submittedByUserId) || isManager() || isAdmin()) && resource != null;
        allow delete: if isSignedIn() && (isOwner(resource.data.submittedByUserId) || isManager() || isAdmin()) && resource != null;
    }

    /**
     * @description Manages KPI approval records. Includes `approvedByUserId` for tracking approvers. Readable by involved parties.
     * @path /kpi_approvals/{kpiApprovalId}
     */
    match /kpi_approvals/{kpiApprovalId} {
        allow get: if isSignedIn() && (isOwner(resource.data.approvedByUserId) || isManager() || isAdmin());
        allow list: if isSignedIn() && (isManager() || isAdmin());
        allow create: if isSignedIn() && (isManager() || isAdmin());
        allow update: if isSignedIn() && (isManager() || isAdmin()) && resource != null;
        allow delete: if isSignedIn() && (isManager() || isAdmin()) && resource != null;
    }

    /**
     * @description Manages performance reports. Access control can be implemented using security rules.
     * @path /reports/{reportId}
     */
    match /reports/{reportId} {
        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow create: if isSignedIn() && isAdmin();
        allow update: if isSignedIn() && isAdmin() && resource != null;
        allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    /**
     * @description Manages global application settings. Readable by all authenticated users, writable only by admins.
     * @path /settings/global
     */
    match /settings/global {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    /**
     * @description Stores the monthly breakdown of corporate KPIs. Readable by authenticated users, writable by admins.
     * @path /monthly_kpis/{monthlyKpiId}
     */
    match /monthly_kpis/{monthlyKpiId} {
        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow create: if isSignedIn() && isAdmin();
        allow update: if isSignedIn() && isAdmin() && resource != null;
        allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    // ---- Helper functions ----

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    function isAdmin() {
      return isSignedIn() && request.auth.token.role == 'Admin';
    }

    function isManager() {
      return isSignedIn() && (request.auth.token.role == 'Manager' || request.auth.token.role == 'VP' || request.auth.token.role == 'AVP');
    }
  }
}