/**
 * @fileoverview Firestore Security Rules for the KPI Dashboard application.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on user roles and ownership.
 * It leverages Firebase Authentication to verify user identity and role-based access control.
 *
 * Data Structure:
 * - User profiles are stored under `/users/{userId}`.
 * - Employee data is stored under `/employees/{employeeId}`.
 * - Department data is stored under `/departments/{departmentId}`.
 * - KPI Categories are stored under `/kpi_categories/{kpiCategoryId}`.
 * - KPI master list is stored under `/kpi_catalog/{kpiId}`.
 * - Cascaded KPIs are stored under `/cascaded_kpis/{cascadedKpiId}`.
 * - Individual KPIs are stored under `/individual_kpis/{individualKpiId}`.
 * - KPI submissions are stored under `/kpi_submissions/{kpiSubmissionId}`.
 * - KPI approvals are stored under `/kpi_approvals/{kpiApprovalId}`.
 * - Reports are stored under `/reports/{reportId}`.
 * - Global settings are stored under `/settings/global`.
 * - Monthly KPIs are stored under `/monthly_kpis/{monthlyKpiId}`.
 *
 * Key Security Decisions:
 * - User listing is restricted to admins only.
 * - Employee and KPI catalog data are publicly readable by authenticated users.
 * - Data validation is minimized to focus on authorization and relational integrity.
 * - Read and write access to individual KPIs is controlled based on user roles and ownership.
 *
 * Denormalization for Authorization:
 * - Currently, no explicit denormalization is implemented. Consider adding fields like `ownerId` to documents
 *   to simplify ownership checks and avoid costly `get()` calls in the future.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @param {string} userId The user ID to check against the request.auth.uid.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param {string} userId The user ID to check against the request.auth.uid.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the existing owner of the resource.
     * @param {string} userId The user ID to check against the request.auth.uid.
     * @return {bool} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has the 'Admin' role.
     * @return {bool} True if the user has the 'Admin' role, false otherwise.
     */
    function isAdmin() {
      return isSignedIn() && request.auth.token.role == 'Admin';
    }

    /**
     * @description Checks if the user has the 'Manager' role.
     * @return {bool} True if the user has the 'Manager' role, false otherwise.
     */
    function isManager() {
      return isSignedIn() && request.auth.token.role == 'Manager';
    }
    
    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if isOwner(userId) - Allows a user to read, create, update, and delete their own profile.
     * @deny (get) if !isSignedIn() - Denies access to profiles for non-authenticated users.
     * @deny (create) if request.auth.uid != request.resource.data.id - Denies creation if the user ID in the data doesn't match the authenticated user ID.
     * @deny (update) if request.resource.data.id != resource.data.id - Denies updates that change the user ID.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if isAdmin();
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for employees.
     * @path /employees/{employeeId}
     * @allow (get, list) if isSignedIn() - Allows any authenticated user to read employee data.
     * @allow (create, update, delete) if isAdmin() - Allows only admins to create, update, and delete employee data.
     * @deny (create, update, delete) if !isAdmin() - Denies non-admins from creating, updating, and deleting employee data.
     * @principle Public read with owner-only writes, requires admin role for modifications.
     */
    match /employees/{employeeId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for departments.
     * @path /departments/{departmentId}
     * @allow (get, list) if isSignedIn() - Allows any authenticated user to read department data.
     * @allow (create, update, delete) if isAdmin() - Allows only admins to create, update, and delete department data.
     * @deny (create, update, delete) if !isAdmin() - Denies non-admins from creating, updating, and deleting department data.
     * @principle Public read with owner-only writes, requires admin role for modifications.
     */
    match /departments/{departmentId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for KPI categories.
     * @path /kpi_categories/{kpiCategoryId}
     * @allow (get, list) if isSignedIn() - Allows any authenticated user to read KPI category data.
     * @allow (create, update, delete) if isAdmin() - Allows only admins to create, update, and delete KPI category data.
     * @deny (create, update, delete) if !isAdmin() - Denies non-admins from creating, updating, and deleting KPI category data.
     * @principle Public read with owner-only writes, requires admin role for modifications.
     */
    match /kpi_categories/{kpiCategoryId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for the KPI catalog.
     * @path /kpi_catalog/{kpiId}
     * @allow (get, list) if isSignedIn() - Allows any authenticated user to read KPI catalog data.
     * @allow (create, update, delete) if isAdmin() - Allows only admins to create, update, and delete KPI catalog data.
     * @deny (create, update, delete) if !isAdmin() - Denies non-admins from creating, updating, and deleting KPI catalog data.
     * @principle Public read with owner-only writes, requires admin role for modifications.
     */
    match /kpi_catalog/{kpiId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for cascaded KPIs.
     * @path /cascaded_kpis/{cascadedKpiId}
     * @allow (get, list) if isSignedIn() - Allows any authenticated user to read cascaded KPI data.
     * @allow (create, update, delete) if isManager() || isAdmin() - Allows only managers and admins to create, update, and delete cascaded KPI data.
     * @deny (create, update, delete) if !isManager() && !isAdmin() - Denies non-managers and non-admins from creating, updating, and deleting cascaded KPI data.
     * @principle Role-based access control, requires manager or admin role for modifications.
     */
    match /cascaded_kpis/{cascadedKpiId} {
      allow get, list: if isSignedIn();
      allow create: if isManager() || isAdmin();
      allow update: if isManager() || isAdmin();
      allow delete: if isManager() || isAdmin();
    }

    /**
     * @description Rules for individual KPIs.
     * @path /individual_kpis/{individualKpiId}
     * @allow get: if isSignedIn(); // TODO: Implement manager/employee access check
     * @allow list: if isSignedIn(); // TODO: Implement manager/employee access check
     * @allow create: if isManager() || isAdmin();
     * @allow update: if isManager() || isAdmin();
     * @allow delete: if isManager() || isAdmin();
     */
    match /individual_kpis/{individualKpiId} {
      allow get: if isSignedIn(); // TODO: Implement manager/employee access check
      allow list: if isSignedIn(); // TODO: Implement manager/employee access check
      allow create: if isManager() || isAdmin();
      allow update: if isManager() || isAdmin();
      allow delete: if isManager() || isAdmin();
    }

    /**
     * @description Rules for KPI submissions.
     * @path /kpi_submissions/{kpiSubmissionId}
     * @allow get: if isSignedIn(); // TODO: Implement submitter/manager access check
     * @allow list: if isSignedIn();  // TODO: Implement submitter/manager access check
     * @allow create: if isSignedIn(); // TODO: Implement ownership validation
     * @allow update: if false; // TODO: Implement manager/submitter update logic
     * @allow delete: if false;
     */
    match /kpi_submissions/{kpiSubmissionId} {
      allow get: if isSignedIn(); // TODO: Implement submitter/manager access check
      allow list: if isSignedIn(); // TODO: Implement submitter/manager access check
      allow create: if isSignedIn(); // TODO: Implement ownership validation
      allow update: if false; // TODO: Implement manager/submitter update logic
      allow delete: if false;
    }

    /**
     * @description Rules for KPI approvals.
     * @path /kpi_approvals/{kpiApprovalId}
     * @allow get: if isSignedIn(); // TODO: Implement access control for involved parties
     * @allow list: if isSignedIn(); // TODO: Implement access control for involved parties
     * @allow create: if isSignedIn(); // TODO: Implement approval process validation
     * @allow update: if false; // Approval records are generally immutable
     * @allow delete: if false;
     */
    match /kpi_approvals/{kpiApprovalId} {
      allow get: if isSignedIn(); // TODO: Implement access control for involved parties
      allow list: if isSignedIn(); // TODO: Implement access control for involved parties
      allow create: if isSignedIn(); // TODO: Implement approval process validation
      allow update: if false; // Approval records are generally immutable
      allow delete: if false;
    }

    /**
     * @description Rules for reports.
     * @path /reports/{reportId}
     * @allow get, list: if isSignedIn(); // TODO: Refine access control as needed
     * @allow create: if isAdmin(); // Reports likely generated by system/admins
     * @allow update: if isAdmin();
     * @allow delete: if isAdmin();
     */
    match /reports/{reportId} {
      allow get, list: if isSignedIn(); // TODO: Refine access control as needed
      allow create: if isAdmin(); // Reports likely generated by system/admins
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for global settings.
     * @path /settings/global
     * @allow get: if isSignedIn();
     * @allow list: if false;
     * @allow create: if isAdmin();
     * @allow update: if isAdmin();
     * @allow delete: if isAdmin();
     */
    match /settings/global {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for monthly KPIs.
     * @path /monthly_kpis/{monthlyKpiId}
     * @allow get, list: if isSignedIn();
     * @allow create: if isAdmin();
     * @allow update: if isAdmin();
     * @allow delete: if isAdmin();
     */
    match /monthly_kpis/{monthlyKpiId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}