/**
 * @fileoverview Firestore Security Rules for the KPI Management Application.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on user roles and ownership.
 * It aims to strike a balance between strict authorization and flexible data models,
 * allowing for rapid iteration during the prototyping phase. Data validation is
 * minimized to focus on critical relationships and ownership.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles. Access is restricted to the owning user.
 * - /departments/{departmentId}: Stores department information.
 * - /kpis/{kpiId}: Stores KPI data. Each KPI document includes an `ownerId` field
 *   to enforce ownership-based access control.
 * - /submissions/{submissionId}: Stores KPI submission data.
 * - /kpi_catalog/{kpiId}: Stores the corporate KPI catalog, which is intended to be publicly readable.
 * - /employees/{employeeId}: Stores employee information.
 *
 * Key Security Decisions:
 * - User-owned data: The /users/{userId} collection enforces strict ownership.
 * - Public KPI Catalog: The /kpi_catalog/{kpiId} collection is publicly readable, but writes are restricted.
 * - Ownership Denormalization: The 'Kpi' entity includes the 'ownerId' field. This avoids the need for expensive
 *   `get()` calls in the security rules to determine ownership.
 *
 * To improve performance and security, data required for authorization decisions
 * (e.g., user roles, ownership) is denormalized directly onto the documents being secured.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @returns {boolean} True if the request is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource and the resource exists.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     * @returns {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Security rules for user profiles.
     * @path /users/{userId}
     * @allow (create) - User can create their own profile if the userId matches their auth UID.
     * @allow (get, update, delete) - User can only access their own profile.
     * @deny (create) - User cannot create a profile with an ID that doesn't match their auth UID.
     * @deny (get, update, delete) - User cannot access other user's profiles.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for departments.
     * @path /departments/{departmentId}
     * @allow (get, list) - Anyone can read department data.
     * @allow (create, update, delete) - No one can create, update or delete department data (admin only).
     * @principle Restricts write access to departments.
     */
    match /departments/{departmentId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Security rules for KPIs.
     * @path /kpis/{kpiId}
     * @allow (get, list) - Anyone can read KPIs.
     * @allow (create) - Only the KPI owner can create a KPI, and the 'ownerId' field must match their UID.
     * @allow (update, delete) - Only the KPI owner can update or delete the KPI.
     * @deny (create) - User cannot create a KPI for another user.
     * @deny (update, delete) - User cannot modify other user's KPIs.
     * @principle Enforces document ownership for writes, public reads.
     */
    match /kpis/{kpiId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.ownerId);
      allow delete: if isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Security rules for submissions.
     * @path /submissions/{submissionId}
     * @allow (get, list) - Anyone can read submissions.
     * @allow (create, update, delete) - No one can create, update or delete submissions (admin only).
     */
    match /submissions/{submissionId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Security rules for the KPI catalog.
     * @path /kpi_catalog/{kpiId}
     * @allow (get, list) - Anyone can read the KPI catalog.
     * @allow (create, update, delete) - No one can create, update, or delete KPIs in the catalog (admin only).
     */
    match /kpi_catalog/{kpiId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Security rules for employees.
     * @path /employees/{employeeId}
     * @allow (get, list) - Anyone can read employee data.
     * @allow (create, update, delete) - No one can create, update or delete employee data (admin only).
     */
    match /employees/{employeeId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}