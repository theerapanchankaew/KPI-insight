/**
 * @fileOverview Firestore Security Rules for KPI Dashboard Application
 *
 * Core Philosophy:
 * This ruleset enforces a role-based and ownership-based access control model.
 * Users can only read/write their own data. Admins have broader access.
 *
 * Data Structure:
 * - /users/{userId}: User profile information.
 * - /employees/{employeeId}: Employee organizational data.
 * - /departments/{departmentId}: Department information.
 * - /kpi_categories/{kpiCategoryId}: KPI category information.
 * - /kpi_catalog/{kpiId}: Master list of corporate KPIs.
 * - /cascaded_kpis/{cascadedKpiId}: KPIs cascaded to departments.
 * - /individual_kpis/{individualKpiId}: KPIs assigned to individual employees.
 * - /kpi_submissions/{kpiSubmissionId}: KPI submission data.
 * - /kpi_approvals/{kpiApprovalId}: KPI approval records.
 * - /reports/{reportId}: Performance reports.
 * - /settings/global: Global application settings.
 *
 * Key Security Decisions:
 * - Listing the `/users` collection is restricted to admins.
 * - Public read access is granted to `/employees`, `/departments`, `/kpi_categories`, and `/kpi_catalog`.
 * - Read/write access to `/individual_kpis` is based on role and ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user profiles.
     * @path /users/{userId}
     * @allow (get, update, delete) if request.auth.uid == userId
     * @allow (create) if request.auth.uid == request.resource.data.id
     * @deny (list) Always deny listing all users.
     * @principle Enforces document ownership and prevents unauthorized listing.
     */
    match /users/{userId} {
      allow get, update, delete: if isOwner(userId);
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow list: if false;
    }

    /**
     * @description Grants access to employee data.
     * @path /employees/{employeeId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if isAdmin()
     * @deny if !isSignedIn()
     * @principle Allows public read access, restricts writes to admins.
     */
    match /employees/{employeeId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Grants access to department data.
     * @path /departments/{departmentId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if isAdmin()
     * @deny if !isSignedIn()
     * @principle Allows public read access, restricts writes to admins.
     */
    match /departments/{departmentId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Grants access to KPI category data.
     * @path /kpi_categories/{kpiCategoryId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if isAdmin()
     * @deny if !isSignedIn()
     * @principle Allows public read access, restricts writes to admins.
     */
    match /kpi_categories/{kpiCategoryId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Grants access to KPI catalog data.
     * @path /kpi_catalog/{kpiId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if isAdmin()
     * @deny if !isSignedIn()
     * @principle Allows public read access, restricts writes to admins.
     */
    match /kpi_catalog/{kpiId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Grants access to cascaded KPI data.
     * @path /cascaded_kpis/{cascadedKpiId}
     * @allow get, list: if isSignedIn();
     * @allow create, update, delete: if isAdmin() || isManager();
     * @deny if !isSignedIn()
     * @principle Allows read access to authenticated users, restricts writes to admins and managers.
     */
    match /cascaded_kpis/{cascadedKpiId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdmin() || isManager();
    }

    /**
     * @description Grants access to individual KPI data.
     * @path /individual_kpis/{individualKpiId}
     * @allow get, list: if isEmployee()
     * @allow create, update, delete: if isAdmin() || isManager();
     * @deny if !isSignedIn()
     * @principle Allows read access to assigned employees and their managers, restricts writes to admins and managers.
     */
    match /individual_kpis/{individualKpiId} {
      allow get, list: if isEmployee();
      allow create, update, delete: if isAdmin() || isManager();
    }

    /**
     * @description Grants access to KPI submission data.
     * @path /kpi_submissions/{kpiSubmissionId}
     * @allow get, list: if isSignedIn();
     * @allow create, update, delete: if isAdmin() || isManager();
     * @deny if !isSignedIn()
     * @principle Allows read access to authenticated users, restricts writes to admins and managers.
     */
    match /kpi_submissions/{kpiSubmissionId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdmin() || isManager();
    }

    /**
     * @description Grants access to KPI approval data.
     * @path /kpi_approvals/{kpiApprovalId}
     * @allow get, list: if isSignedIn();
     * @allow create, update, delete: if isAdmin() || isManager();
     * @deny if !isSignedIn()
     * @principle Allows read access to authenticated users, restricts writes to admins and managers.
     */
    match /kpi_approvals/{kpiApprovalId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdmin() || isManager();
    }

    /**
     * @description Grants access to report data.
     * @path /reports/{reportId}
     * @allow get, list: if isSignedIn();
     * @allow create, update, delete: if isAdmin() || isManager();
     * @deny if !isSignedIn()
     * @principle Allows read access to authenticated users, restricts writes to admins and managers.
     */
    match /reports/{reportId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdmin() || isManager();
    }

    /**
     * @description Grants access to global settings data.
     * @path /settings/global
     * @allow get: if isSignedIn();
     * @allow update: if isAdmin();
     * @deny create, delete: if true;
     * @principle Allows read access to authenticated users, restricts writes to admins.
     */
    match /settings/global {
          allow get: if isSignedIn();
          allow update: if isAdmin();
          allow create, delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      return isSignedIn() && request.auth.token.role == 'Admin';
    }

    function isManager() {
      return isSignedIn() && (request.auth.token.role == 'Manager' || request.auth.token.role == 'Admin');
    }

    function isEmployee() {
      return isSignedIn()
    }
  }
}