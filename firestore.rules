/**
 * @fileOverview Firestore Security Rules for the KPI Management Application.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on user roles and ownership.
 * It implements a mix of role-based and ownership-based access control.
 * Strict validation of request data is relaxed in favor of rapid prototyping and iteration.
 *
 * Data Structure:
 * - /users/{userId}: User profiles.
 * - /departments/{departmentId}: Department information.
 * - /kpis/{kpiId}: KPI data, each document contains an 'ownerId' field.
 * - /submissions/{submissionId}: KPI submission data.
 * - /kpi_catalog/{kpiId}: Catalog of KPIs.
 * - /employees/{employeeId}: Employee data.
 * - /settings/global: Global application settings stored in a singleton document.
 *
 * Key Security Decisions:
 * - User listing is only allowed for admins.
 * - Public read access is granted to the KPI catalog and employee data.
 * - Global application settings are publicly readable but only modifiable by admins.
 * - Data type validation is minimized for prototyping. Only authorization-critical fields are validated.
 *
 * Denormalization for Authorization:
 * - The 'Kpi' entity contains an 'ownerId' field to simplify ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the resource.
     * @param {string} userId - The user ID to compare against the request's auth UID.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is the owner of the existing resource.
     * @param {string} userId - The user ID to compare against the resource's owner ID.
     * @returns {boolean} True if the user is the owner of the existing resource, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Match for /users/{userId} documents.
     * @path /users/{userId}
     * @allow (create) - A user can create their own profile if the userId matches their auth UID.
     * @allow (get, update, delete) - A user can read/write their own profile if the userId matches their auth UID.
     * @deny (create) - A user cannot create a profile for another user (userId does not match auth UID).
     * @deny (get, update, delete) - A user cannot read/write another user's profile (userId does not match auth UID).
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User listing is disabled.

      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Match for /departments/{departmentId} documents.
     * @path /departments/{departmentId}
     * @allow (get, list) - Anyone can read department information.
     * @deny (create, update, delete) - No one can create, update, or delete department information.
     * @principle Public read access with no write access.
     */
    match /departments/{departmentId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Match for /kpis/{kpiId} documents.
     * @path /kpis/{kpiId}
     * @allow (get, list) - Anyone can read KPI data.
     * @allow (create) - A user can create a KPI if they are the owner (request.auth.uid == request.resource.data.ownerId).
     * @allow (update, delete) - A user can update/delete a KPI if they are the owner (resource.data.ownerId == request.auth.uid).
     * @deny (create) - A user cannot create a KPI if they are not the owner (request.auth.uid != request.resource.data.ownerId).
     * @deny (update, delete) - A user cannot update/delete a KPI if they are not the owner (resource.data.ownerId != request.auth.uid).
     * @principle Public read access with owner-only writes, enforcing document ownership.
     */
    match /kpis/{kpiId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.ownerId);
      allow delete: if isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Match for /submissions/{submissionId} documents.
     * @path /submissions/{submissionId}
     * @allow (get, list) - Anyone can read submission data.
     * @allow (create) - A user can create a submission if they are the submitter (request.auth.uid == request.resource.data.submittedBy).
     * @allow (update, delete) - A user can update/delete a submission if they are the submitter (resource.data.submittedBy == request.auth.uid).
     * @deny (create) - A user cannot create a submission if they are not the submitter (request.auth.uid != request.resource.data.submittedBy).
     * @deny (update, delete) - A user cannot update/delete a submission if they are not the submitter (resource.data.submittedBy != request.auth.uid).
     * @principle Public read access with owner-only writes, enforcing document ownership.
     */
    match /submissions/{submissionId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.submittedBy == request.auth.uid;
      allow update: if isExistingOwner(resource.data.submittedBy);
      allow delete: if isExistingOwner(resource.data.submittedBy);
    }

    /**
     * @description Match for /kpi_catalog/{kpiId} documents.
     * @path /kpi_catalog/{kpiId}
     * @allow (get, list) - Anyone can read KPI catalog data.
     * @deny (create, update, delete) - No one can create, update, or delete KPI catalog data.
     * @principle Public read access with no write access.
     */
    match /kpi_catalog/{kpiId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Match for /employees/{employeeId} documents.
     * @path /employees/{employeeId}
     * @allow (get, list) - Anyone can read employee data.
     * @deny (create, update, delete) - No one can create, update, or delete employee data.
     * @principle Public read access with no write access.
     */
    match /employees/{employeeId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
    
     /**
      * @description Match for /settings/global document.
      * @path /settings/global
      * @allow (get) - Anyone can read the global settings.
      * @deny (create, update, delete) - No one can create, update, or delete the global settings document.
      * @principle Public read access with restricted write access.
      */
    match /settings/global {
        allow get: if true;
        allow list: if false;
        allow create, update, delete: if false;
    }
  }
}