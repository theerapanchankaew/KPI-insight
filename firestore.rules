rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read their own profile and admins to read all profiles. Writes are restricted to the user themselves.
     * @path /users/{userId}
     * @allow (get, update, delete) if isSignedIn() && isOwner(userId)
     * @allow (create) if isSignedIn() && request.auth.uid == userId
     * @allow (list) if isSignedIn() && isAdmin()
     * @deny (update, delete) if !isExistingOwner(userId)
     * @deny (create) if !isSignedIn() || request.auth.uid != userId
     * @principle Enforces document ownership for writes and restricts listing to admins.
     */
    match /users/{userId} {
      // Function for path-based authorization
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Check if the user is an admin.
      function isAdmin() {
        return request.auth.token.role == 'Admin';
      }

      // Function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }
      
      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      //Allow read access if signed in and is owner or is Admin
      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow list: if isSignedIn() && isAdmin();

      // Allow creation only if the user is signed in and the userId matches the authenticated user's ID.
      allow create: if isSignedIn() && request.auth.uid == userId;

      // Allow updates if the user is signed in and is the owner.
      allow update: if isSignedIn() && isOwner(userId);

      // Allow delete if the user is signed in and is the owner.
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Stores public employee organizational data. Readable by all authenticated users, writable only by admins.
     * @path /employees/{employeeId}
     * @allow (get, list) if isSignedIn()
     * @allow (create, update, delete) if isSignedIn() && isAdmin()
     * @deny (create, update, delete) if !isSignedIn() || !isAdmin()
     * @principle Restricts write access to admins.
     */
    match /employees/{employeeId} {

      // Function to check if the user is an admin.
      function isAdmin() {
        return request.auth.token.role == 'Admin';
      }

      // Function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }
      
      function isExistingEmployee() {
        return exists(resource);
      }

      // Allow read access to all if signed in
      allow get, list: if isSignedIn();

      // Only allow admins to create
      allow create: if isSignedIn() && isAdmin();

      // Only allow admins to update
      allow update: if isSignedIn() && isAdmin();

      // Only allow admins to delete
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Stores department information. Readable by authenticated users, writable by admins.
     * @path /departments/{departmentId}
     * @allow (get, list) if isSignedIn()
     * @allow (create, update, delete) if isSignedIn() && isAdmin()
     * @deny (create, update, delete) if !isSignedIn() || !isAdmin()
     * @principle Restricts write access to admins.
     */
    match /departments/{departmentId} {

      // Function to check if the user is an admin.
      function isAdmin() {
        return request.auth.token.role == 'Admin';
      }

      // Function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }
      
      function isExistingDepartment() {
        return exists(resource);
      }

      // Allow read access to all if signed in
      allow get, list: if isSignedIn();

      // Only allow admins to create
      allow create: if isSignedIn() && isAdmin();

      // Only allow admins to update
      allow update: if isSignedIn() && isAdmin();

      // Only allow admins to delete
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Stores KPI category information. Readable by authenticated users, writable by admins.
     * @path /kpi_categories/{kpiCategoryId}
     * @allow (get, list) if isSignedIn()
     * @allow (create, update, delete) if isSignedIn() && isAdmin()
     * @deny (create, update, delete) if !isSignedIn() || !isAdmin()
     * @principle Restricts write access to admins.
     */
    match /kpi_categories/{kpiCategoryId} {

      // Function to check if the user is an admin.
      function isAdmin() {
        return request.auth.token.role == 'Admin';
      }

      // Function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }
      
      function isExistingKpiCategory() {
        return exists(resource);
      }

      // Allow read access to all if signed in
      allow get, list: if isSignedIn();

      // Only allow admins to create
      allow create: if isSignedIn() && isAdmin();

      // Only allow admins to update
      allow update: if isSignedIn() && isAdmin();

      // Only allow admins to delete
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description The master list of all corporate KPIs. Readable by all authenticated users, writable only by admins.
     * @path /kpi_catalog/{kpiId}
     * @allow (get, list) if isSignedIn()
     * @allow (create, update, delete) if isSignedIn() && isAdmin()
     * @deny (create, update, delete) if !isSignedIn() || !isAdmin()
     * @principle Restricts write access to admins.
     */
    match /kpi_catalog/{kpiId} {

      // Function to check if the user is an admin.
      function isAdmin() {
        return request.auth.token.role == 'Admin';
      }

      // Function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }
      
      function isExistingKpi() {
        return exists(resource);
      }

      // Allow read access to all if signed in
      allow get, list: if isSignedIn();

      // Only allow admins to create
      allow create: if isSignedIn() && isAdmin();

      // Only allow admins to update
      allow update: if isSignedIn() && isAdmin();

      // Only allow admins to delete
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description KPIs that have been cascaded to departments. Readable by authenticated users, writable by managers/admins.
     * @path /cascaded_kpis/{cascadedKpiId}
     * @allow (get, list) if isSignedIn()
     * @allow (create, update, delete) if isSignedIn() && (isAdmin() || isManager())
     * @deny (create, update, delete) if !isSignedIn() || (!isAdmin() && !isManager())
     * @principle Restricts write access to admins and managers.
     */
    match /cascaded_kpis/{cascadedKpiId} {

      // Function to check if the user is an admin.
      function isAdmin() {
        return request.auth.token.role == 'Admin';
      }

      // Function to check if the user is a manager.
      function isManager() {
        return request.auth.token.role == 'Manager';
      }

      // Function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      function isExistingCascadedKpi() {
        return exists(resource);
      }
      
      // Allow read access to all if signed in
      allow get, list: if isSignedIn();

      // Only allow admins and managers to create
      allow create: if isSignedIn() && (isAdmin() || isManager());

      // Only allow admins and managers to update
      allow update: if isSignedIn() && (isAdmin() || isManager());

      // Only allow admins and managers to delete
      allow delete: if isSignedIn() && (isAdmin() || isManager());
    }

    /**
     * @description KPIs assigned to individual employees. Readable by the assigned user and their manager. Writable by manager/admin. Status updatable by employee.
     * @path /individual_kpis/{individualKpiId}
     * // TODO: Implement more granular access control for individual KPIs.
     * @allow (get, list) if isSignedIn()
     * @allow (create, update, delete) if isSignedIn() && (isAdmin() || isManager()) // TODO: Refine write access
     * @deny (create, update, delete) if !isSignedIn()
     * @principle Placeholder for individual KPI access control.
     */
    match /individual_kpis/{individualKpiId} {
      // Function to check if the user is an admin.
      function isAdmin() {
        return request.auth.token.role == 'Admin';
      }

      // Function to check if the user is a manager.
      function isManager() {
        return request.auth.token.role == 'Manager';
      }

      // Function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }
      
      function isExistingIndividualKpi() {
        return exists(resource);
      }

      // Allow read access to all if signed in
      allow get, list: if isSignedIn();

      // Only allow admins and managers to create
      allow create: if isSignedIn() && (isAdmin() || isManager());

      // Only allow admins and managers to update
      allow update: if isSignedIn() && (isAdmin() || isManager());

      // Only allow admins and managers to delete
      allow delete: if isSignedIn() && (isAdmin() || isManager());
    }

    /**
     * @description Stores KPI submission data. Includes `submittedByUserId` for ownership checks. Readable by submitter and their manager.
     * @path /kpi_submissions/{kpiSubmissionId}
     * // TODO: Implement access control based on the submitter and their manager.
     * @allow (get, list) if isSignedIn()
     * @allow (create, update, delete) if isSignedIn() // TODO: Add authorization check
     * @deny (create, update, delete) if !isSignedIn()
     * @principle Placeholder for KPI submission access control.
     */
    match /kpi_submissions/{kpiSubmissionId} {

      // Function to check if the user is an admin.
      function isAdmin() {
        return request.auth.token.role == 'Admin';
      }

      // Function to check if the user is a manager.
      function isManager() {
        return request.auth.token.role == 'Manager';
      }

      // Function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }
      
       function isExistingKpiSubmission() {
        return exists(resource);
      }

      // Allow read access to all if signed in
      allow get, list: if isSignedIn();

      // Only allow admins and managers to create
      allow create: if isSignedIn(); //TODO: Add authorization check

      // Only allow admins and managers to update
      allow update: if isSignedIn(); //TODO: Add authorization check

      // Only allow admins and managers to delete
      allow delete: if isSignedIn(); //TODO: Add authorization check
    }

    /**
     * @description Stores KPI approval records. Includes `approvedByUserId` for tracking approvers. Readable by involved parties.
     * @path /kpi_approvals/{kpiApprovalId}
     * // TODO: Implement access control based on the approver and the submission.
     * @allow (get, list) if isSignedIn()
     * @allow (create, update, delete) if isSignedIn() // TODO: Add authorization check
     * @deny (create, update, delete) if !isSignedIn()
     * @principle Placeholder for KPI approval access control.
     */
    match /kpi_approvals/{kpiApprovalId} {

      // Function to check if the user is an admin.
      function isAdmin() {
        return request.auth.token.role == 'Admin';
      }

      // Function to check if the user is a manager.
      function isManager() {
        return request.auth.token.role == 'Manager';
      }

      // Function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }
      
      function isExistingKpiApproval() {
        return exists(resource);
      }

      // Allow read access to all if signed in
      allow get, list: if isSignedIn();

      // Only allow admins and managers to create
      allow create: if isSignedIn(); //TODO: Add authorization check

      // Only allow admins and managers to update
      allow update: if isSignedIn(); //TODO: Add authorization check

      // Only allow admins and managers to delete
      allow delete: if isSignedIn(); //TODO: Add authorization check
    }

    /**
     * @description Stores performance reports. Access control can be implemented using security rules.
     * @path /reports/{reportId}
     * // TODO: Implement access control for reports.
     * @allow (get, list) if isSignedIn()
     * @allow (create, update, delete) if isSignedIn() // TODO: Add authorization check
     * @deny (create, update, delete) if !isSignedIn()
     * @principle Placeholder for report access control.
     */
    match /reports/{reportId} {

      // Function to check if the user is an admin.
      function isAdmin() {
        return request.auth.token.role == 'Admin';
      }

      // Function to check if the user is a manager.
      function isManager() {
        return request.auth.token.role == 'Manager';
      }

      // Function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }
      
      function isExistingReport() {
        return exists(resource);
      }

      // Allow read access to all if signed in
      allow get, list: if isSignedIn();

      // Only allow admins and managers to create
      allow create: if isSignedIn(); //TODO: Add authorization check

      // Only allow admins and managers to update
      allow update: if isSignedIn(); //TODO: Add authorization check

      // Only allow admins and managers to delete
      allow delete: if isSignedIn(); //TODO: Add authorization check
    }

    /**
     * @description Global application settings. Readable by all authenticated users, writable only by admins.
     * @path /settings/global
     * @allow (get, list) if isSignedIn()
     * @allow (create, update, delete) if isSignedIn() && isAdmin()
     * @deny (create, update, delete) if !isSignedIn() || !isAdmin()
     * @principle Restricts write access to admins.
     */
    match /settings/global {

      // Function to check if the user is an admin.
      function isAdmin() {
        return request.auth.token.role == 'Admin';
      }

      // Function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }
      
      function isExistingSettings() {
        return exists(resource);
      }

      // Allow read access to all if signed in
      allow get, list: if isSignedIn();

      // Only allow admins to create
      allow create: if isSignedIn() && isAdmin();

      // Only allow admins to update
      allow update: if isSignedIn() && isAdmin();

      // Only allow admins to delete
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Stores the monthly breakdown of corporate KPIs. Readable by authenticated users, writable by admins.
     * @path /monthly_kpis/{monthlyKpiId}
     * @allow (get, list) if isSignedIn()
     * @allow (create, update, delete) if isSignedIn() && isAdmin()
     * @deny (create, update, delete) if !isSignedIn() || !isAdmin()
     * @principle Restricts write access to admins.
     */
    match /monthly_kpis/{monthlyKpiId} {

      // Function to check if the user is an admin.
      function isAdmin() {
        return request.auth.token.role == 'Admin';
      }

      // Function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }
      
      function isExistingMonthlyKpi() {
        return exists(resource);
      }

      // Allow read access to all if signed in
      allow get, list: if isSignedIn();

      // Only allow admins to create
      allow create: if isSignedIn() && isAdmin();

      // Only allow admins to update
      allow update: if isSignedIn() && isAdmin();

      // Only allow admins to delete
      allow delete: if isSignedIn() && isAdmin();
    }
  }
}