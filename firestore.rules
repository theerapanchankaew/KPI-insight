/**
 * @file Firebase Security Rules for KPI Dashboard Application
 *
 * @core_philosophy This ruleset enforces a role-based access control model, supplemented by ownership checks where applicable.
 *  - Authenticated users can read most data, while administrative privileges are required for modifying core data.
 *  - Data creation and modification for user-specific data are restricted to the user themselves.
 * @data_structure The database is organized into top-level collections for entities like users, KPIs, and departments.
 *  - User-specific data is stored under the `/users/{userId}` path.
 * @key_security_decisions
 *  - Listing of users is restricted to admins only.
 *  - Global settings are readable by all authenticated users but writable only by admins.
 *  - Data validation is limited to ownership and relational integrity checks for prototyping flexibility.
 *  - Read operations on most collections are public to authenticated users.
 * @denormalization_for_authorization None: No denormalization is used in this ruleset.
 * @structural_segregation None: No structural segregation is used in this ruleset.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read their own profile and admins to manage all profiles.
     * @path /users/{userId}
     * @allow (get, update, delete) if isOwner(userId)
     * @allow (list) if isAdmin()
     * @allow (create) if isSelfCreation(userId)
     * @deny (get) if !isSignedIn()
     * @deny (update, delete) if !isOwner(userId) && !isAdmin()
     * @deny (create) if !isSelfCreation(userId)
     * @deny (list) if !isAdmin()
     * @principle Enforces document ownership for writes and restricts listing to admins.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if isAdmin();
      allow create: if isSelfCreation(userId);
      allow update: if isOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows any authenticated user to read employee data, but only admins can modify it.
     * @path /employees/{employeeId}
     * @allow (get, list) if isSignedIn()
     * @allow (create, update, delete) if isAdmin()
     * @deny (get, list) if !isSignedIn()
     * @deny (create, update, delete) if !isAdmin()
     * @principle Restricts writes to admin users while allowing public reads for authenticated users.
     */
    match /employees/{employeeId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Allows any authenticated user to read department data, but only admins can modify it.
     * @path /departments/{departmentId}
     * @allow (get, list) if isSignedIn()
     * @allow (create, update, delete) if isAdmin()
     * @deny (get, list) if !isSignedIn()
     * @deny (create, update, delete) if !isAdmin()
     * @principle Restricts writes to admin users while allowing public reads for authenticated users.
     */
    match /departments/{departmentId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Allows any authenticated user to read KPI category data, but only admins can modify it.
     * @path /kpi_categories/{kpiCategoryId}
     * @allow (get, list) if isSignedIn()
     * @allow (create, update, delete) if isAdmin()
     * @deny (get, list) if !isSignedIn()
     * @deny (create, update, delete) if !isAdmin()
     * @principle Restricts writes to admin users while allowing public reads for authenticated users.
     */
    match /kpi_categories/{kpiCategoryId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Allows any authenticated user to read KPI catalog data, but only admins can modify it.
     * @path /kpi_catalog/{kpiId}
     * @allow (get, list) if isSignedIn()
     * @allow (create, update, delete) if isAdmin()
     * @deny (get, list) if !isSignedIn()
     * @deny (create, update, delete) if !isAdmin()
     * @principle Restricts writes to admin users while allowing public reads for authenticated users.
     */
    match /kpi_catalog/{kpiId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

     /**
      * @description Allows authenticated users to read cascaded KPI data, but only managers/admins can modify it.
      * @path /cascaded_kpis/{cascadedKpiId}
      * @allow (get, list) if isSignedIn()
      * @allow (create, update, delete) if isManager() || isAdmin()
      * @deny (get, list) if !isSignedIn()
      * @deny (create, update, delete) if !(isManager() || isAdmin())
      * @principle Restricts writes to managers/admins while allowing public reads for authenticated users.
      */
    match /cascaded_kpis/{cascadedKpiId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isManager() || isAdmin();
    }

    /**
     * @description Allows assigned users and their managers to read individual KPI data. Writable by manager/admin. Status updatable by employee.
     * @path /individual_kpis/{individualKpiId}
     */
    match /individual_kpis/{individualKpiId} {
      allow get: if isSignedIn(); // TODO: Add more specific read rules.
      allow list: if isSignedIn(); // TODO: Add more specific read rules.
      allow create: if isManager() || isAdmin();
      allow update: if isManager() || isAdmin(); // TODO: Refine update rules for employee status updates.
      allow delete: if isManager() || isAdmin();
    }

    /**
     * @description Stores KPI submission data. Includes `submittedByUserId` for ownership checks. Readable by submitter and their manager.
     * @path /kpi_submissions/{kpiSubmissionId}
     */
    match /kpi_submissions/{kpiSubmissionId} {
      allow get: if isSignedIn(); // TODO: Add more specific read rules.
      allow list: if isSignedIn(); // TODO: Add more specific read rules.
      allow create: if isSignedIn(); // TODO: Add ownership check and role-based restrictions.
      allow update: if isSignedIn(); // TODO: Add ownership check and role-based restrictions.
      allow delete: if isSignedIn(); // TODO: Add ownership check and role-based restrictions.
    }

    /**
     * @description Stores KPI approval records. Includes `approvedByUserId` for tracking approvers. Readable by involved parties.
     * @path /kpi_approvals/{kpiApprovalId}
     */
    match /kpi_approvals/{kpiApprovalId} {
      allow get: if isSignedIn(); // TODO: Add more specific read rules.
      allow list: if isSignedIn(); // TODO: Add more specific read rules.
      allow create: if isSignedIn(); // TODO: Add role-based restrictions.
      allow update: if isSignedIn(); // TODO: Add role-based restrictions.
      allow delete: if isSignedIn(); // TODO: Add role-based restrictions.
    }

    /**
     * @description Stores performance reports. Access control can be implemented using security rules.
     * @path /reports/{reportId}
     */
    match /reports/{reportId} {
      allow get: if isSignedIn(); // TODO: Add more specific read rules.
      allow list: if isSignedIn(); // TODO: Add more specific read rules.
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Global application settings. Readable by all authenticated users, writable only by admins.
     * @path /settings/global
     */
    match /settings/global {
        allow get: if isSignedIn();
        allow list: if false;
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }

    /**
     * @description Stores the monthly breakdown of corporate KPIs. Readable by authenticated users, writable by admins.
     * @path /monthly_kpis/{monthlyKpiId}
     * @allow (get, list) if isSignedIn()
     * @allow (create, update, delete) if isAdmin()
     * @deny (get, list) if !isSignedIn()
     * @deny (create, update, delete) if !isAdmin()
     * @principle Restricts writes to admin users while allowing public reads for authenticated users.
     */
    match /monthly_kpis/{monthlyKpiId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }

  function isAdmin() {
    return isSignedIn() && request.auth.token.role == 'Admin';
  }

  function isManager() {
    return isSignedIn() && (request.auth.token.role == 'Manager' || request.auth.token.role == 'VP' || request.auth.token.role == 'AVP');
  }

  function isSelfCreation(userId) {
    return request.auth.uid == userId;
  }
}