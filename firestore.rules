rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user profile data.
     * @path /users/{userId}
     * @allow (get, list, update) if request.auth.uid == userId || isAdmin()
     * @allow (create) if request.auth.uid == userId && request.resource.data.id == userId
     * @deny (delete) if true
     * @principle Enforces document ownership for writes and allows admin read access.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow delete: if false;
    }

    /**
     * @description Grants access to employee organizational data.
     * @path /employees/{employeeId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if isAdmin()
     * @deny none
     * @principle Allows public read access and restricts write access to admins.
     */
    match /employees/{employeeId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Grants access to department information.
     * @path /departments/{departmentId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if isAdmin()
     * @deny none
     * @principle Allows public read access and restricts write access to admins.
     */
    match /departments/{departmentId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Grants access to KPI category information.
     * @path /kpi_categories/{kpiCategoryId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if isAdmin()
     * @deny none
     * @principle Allows public read access and restricts write access to admins.
     */
    match /kpi_categories/{kpiCategoryId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Grants access to the master list of corporate KPIs.
     * @path /kpi_catalog/{kpiId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if isAdmin()
     * @deny none
     * @principle Allows public read access and restricts write access to admins.
     */
    match /kpi_catalog/{kpiId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Grants access to KPIs cascaded to departments.
     * @path /cascaded_kpis/{cascadedKpiId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if isManager() || isAdmin()
     * @deny none
     * @principle Allows public read access and restricts write access to managers and admins.
     */
    match /cascaded_kpis/{cascadedKpiId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && (isManager() || isAdmin());
      allow update: if isSignedIn() && (isManager() || isAdmin());
      allow delete: if isSignedIn() && (isManager() || isAdmin());
    }

    /**
     * @description Grants access to KPIs assigned to individual employees.
     * @path /individual_kpis/{individualKpiId}
     */
    match /individual_kpis/{individualKpiId} {
      allow get: if isSignedIn() && (getOwner(individualKpiId) || isManager() || isAdmin()); // TODO: Add role based access
      allow list: if isSignedIn() && (isManager() || isAdmin()); // TODO: Add role based access
      allow create: if isSignedIn() && (isManager() || isAdmin());
      allow update: if isSignedIn() && (isManager() || isAdmin());
      allow delete: if isSignedIn() && (isManager() || isAdmin());
    }

    /**
     * @description Grants access to KPI submission data.
     * @path /kpi_submissions/{kpiSubmissionId}
     */
    match /kpi_submissions/{kpiSubmissionId} {
      allow get: if isSignedIn() && (isSubmitter(kpiSubmissionId) || isManager() || isAdmin()); // TODO: Add role based access
      allow list: if isSignedIn() && (isManager() || isAdmin()); // TODO: Add role based access
      allow create: if isSignedIn() && isSubmitter(kpiSubmissionId); // TODO: Add role based access
      allow update: if isSignedIn() && (isSubmitter(kpiSubmissionId) || isManager() || isAdmin()); // TODO: Add role based access
      allow delete: if isSignedIn() && isAdmin(); // TODO: Add role based access
    }

    /**
     * @description Grants access to KPI approval records.
     * @path /kpi_approvals/{kpiApprovalId}
     */
    match /kpi_approvals/{kpiApprovalId} {
      allow get: if isSignedIn() && (isApprover(kpiApprovalId) || isManager() || isAdmin()); // TODO: Add role based access
      allow list: if isSignedIn() && (isManager() || isAdmin()); // TODO: Add role based access
      allow create: if isSignedIn() && (isApprover(kpiApprovalId) || isManager() || isAdmin()); // TODO: Add role based access
      allow update: if isSignedIn() && (isApprover(kpiApprovalId) || isManager() || isAdmin()); // TODO: Add role based access
      allow delete: if isSignedIn() && isAdmin(); // TODO: Add role based access
    }

    /**
     * @description Grants access to performance reports.
     * @path /reports/{reportId}
     */
    match /reports/{reportId} {
      allow get: if isSignedIn() && (isViewer(reportId) || isManager() || isAdmin()); // TODO: Add role based access
      allow list: if isSignedIn() && (isManager() || isAdmin()); // TODO: Add role based access
      allow create: if isSignedIn() && (isManager() || isAdmin()); // TODO: Add role based access
      allow update: if isSignedIn() && (isManager() || isAdmin()); // TODO: Add role based access
      allow delete: if isSignedIn() && isAdmin(); // TODO: Add role based access
    }

     /**
     * @description Grants access to global application settings.
     * @path /settings/global
     */
    match /settings/global {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isAdmin() {
      return isSignedIn() && request.auth.token.role == 'Admin';
    }

    function isManager() {
      return isSignedIn() && (request.auth.token.role == 'Manager' || request.auth.token.role == 'VP' || request.auth.token.role == 'AVP');
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    // Placeholder functions for role-based access in TODO sections
    function isSubmitter(kpiSubmissionId) {
      return isSignedIn() && request.auth.uid == get(/databases/$(database)/documents/kpi_submissions/$(kpiSubmissionId)).data.submittedByUserId;
    }

    function isApprover(kpiApprovalId) {
      let kpiApproval = get(/databases/$(database)/documents/kpi_approvals/$(kpiApprovalId)).data;
      return isSignedIn() && (request.auth.uid == kpiApproval.approverUserId || request.auth.uid == kpiApproval.requestingUserId);
    }

    function isViewer(reportId) {
      return isSignedIn() && request.auth.uid == get(/databases/$(database)/documents/reports/$(reportId)).data.viewerUserId;
    }

    function getOwner(individualKpiId) {
        return isSignedIn() && request.auth.uid == get(/databases/$(database)/documents/individual_kpis/$(individualKpiId)).data.ownerUserId;
    }
  }
}