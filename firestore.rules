/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model for a KPI dashboard application.
 *
 * Data Structure:
 * - /users/{userId}: User profile information, accessible only to the user themselves and admins.
 * - /employees/{employeeId}: Public employee data, readable by all authenticated users, writable by admins.
 * - /departments/{departmentId}: Department information, readable by authenticated users, writable by admins.
 * - /kpi_categories/{kpiCategoryId}: KPI category information, readable by authenticated users, writable by admins.
 * - /kpi_catalog/{kpiId}: Master list of KPIs, readable by all authenticated users, writable by admins.
 * - /cascaded_kpis/{cascadedKpiId}: KPIs cascaded to departments, readable by authenticated users, writable by managers/admins.
 * - /individual_kpis/{individualKpiId}: KPIs assigned to individual employees, readable by the assigned user and their manager, writable by manager/admin, status updatable by employee.
 * - /kpi_submissions/{kpiSubmissionId}: KPI submission data, readable by submitter and their manager, writable by submitter.
 * - /kpi_approvals/{kpiApprovalId}: KPI approval records, readable by involved parties, writable by admins.
 * - /reports/{reportId}: Performance reports, access control can be implemented using security rules.
 * - /settings/global: Global application settings, readable by all authenticated users, writable only by admins.
 * - /monthly_kpis/{monthlyKpiId}: Monthly breakdown of corporate KPIs, readable by authenticated users, writable by admins.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied to prevent unauthorized access to user data.
 * - Authenticated users can read most data, but write access is restricted based on role and ownership.
 * - The rules prioritize a secure-by-default posture, explicitly denying access where the intended access pattern is unclear.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by an authenticated user.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided userId.
     * @param {string} userId - The user ID to compare against.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is an Admin.
     */
    function isAdmin() {
      return request.auth.token.role == 'Admin';
    }

    /**
     * @description Checks if the user is the owner and the document exists.
     * @param {string} userId - The user ID to compare against.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Defines access rules for user profiles.
     * @path /users/{userId}
     * @allow (get) User with UID 'user123' can read their own profile.
     * @allow (create) User with UID 'user123' can create their own profile.
     * @deny (get) User with UID 'user456' cannot read profile of user with UID 'user123'.
     * @deny (create) User with UID 'user456' cannot create profile of user with UID 'user123'.
     * @principle Enforces document ownership for writes and restricts read access to the owner.
     */
    match /users/{userId} {
      // Allow the user to read their own profile, and admins to read any profile.
      allow get: if isOwner(userId) || isAdmin();
      allow list: if isAdmin(); // Only admins can list all users.

      // Allow the user to create their own profile.
      allow create: if isOwner(userId) && request.resource.data.id == userId;

      // Allow the user to update their own profile.
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;

      // Allow the user to delete their own profile.
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines access rules for employee data.
     * @path /employees/{employeeId}
     * @allow (get) Authenticated user can read employee data.
     * @allow (create) Admin can create employee data.
     * @deny (create) Non-admin cannot create employee data.
     * @principle Restricts write access to admins while allowing public read access.
     */
    match /employees/{employeeId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Defines access rules for department data.
     * @path /departments/{departmentId}
     * @allow (get) Authenticated user can read department data.
     * @allow (create) Admin can create department data.
     * @deny (create) Non-admin cannot create department data.
     * @principle Restricts write access to admins while allowing public read access.
     */
    match /departments/{departmentId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Defines access rules for KPI category data.
     * @path /kpi_categories/{kpiCategoryId}
     * @allow (get) Authenticated user can read KPI category data.
     * @allow (create) Admin can create KPI category data.
     * @deny (create) Non-admin cannot create KPI category data.
     * @principle Restricts write access to admins while allowing public read access.
     */
    match /kpi_categories/{kpiCategoryId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Defines access rules for the KPI catalog.
     * @path /kpi_catalog/{kpiId}
     * @allow (get) Authenticated user can read KPI data.
     * @allow (create) Admin can create KPI data.
     * @deny (create) Non-admin cannot create KPI data.
     * @principle Restricts write access to admins while allowing public read access.
     */
    match /kpi_catalog/{kpiId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Defines access rules for cascaded KPIs.
     * @path /cascaded_kpis/{cascadedKpiId}
     */
    match /cascaded_kpis/{cascadedKpiId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin(); // TODO: Managers should also be able to create
      allow update: if isAdmin() && resource != null; // TODO: Managers should also be able to update
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Defines access rules for individual KPIs.
     * @path /individual_kpis/{individualKpiId}
     */
    match /individual_kpis/{individualKpiId} {
      allow get, list: if isSignedIn(); // TODO: Refine to the assigned user and their manager.
      allow create: if isAdmin(); // TODO: Managers should also be able to create
      allow update: if isAdmin() && resource != null; // TODO: Managers should also be able to update
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Defines access rules for KPI submissions.
     * @path /kpi_submissions/{kpiSubmissionId}
     *  @allow (list) Authenticated user can list KPI submissions data.
     */
    match /kpi_submissions/{kpiSubmissionId} {
      allow get, list: if isSignedIn(); // TODO: Refine to the submitter and their manager.
      allow create: if isSignedIn(); // TODO: Only allow if the submittedByUserId matches the request.auth.uid
      allow update: if false; // TODO: Add rules for updating KPI submissions.
      allow delete: if false;
    }

    /**
     * @description Defines access rules for KPI approvals.
     * @path /kpi_approvals/{kpiApprovalId}
     */
    match /kpi_approvals/{kpiApprovalId} {
      allow get, list: if isSignedIn(); // TODO: Refine to involved parties
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Defines access rules for reports.
     * @path /reports/{reportId}
     */
    match /reports/{reportId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Defines access rules for global settings.
     * @path /settings/global
     */
    match /settings/global {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Defines access rules for monthly KPIs.
     * @path /monthly_kpis/{monthlyKpiId}
     */
    match /monthly_kpis/{monthlyKpiId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
  }
}