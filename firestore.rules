/**
 * @file Firestore Security Rules for KPI Insights Application
 * @corePhilosophy This ruleset enforces a strict user-ownership model for user profiles and allows public read access to departments, roles and KPI categories.
 *  KPIs and KPI Submissions are organized under Departments, enforcing ownership.
 * @dataStructure
 *  - /users/{userId}: Stores user profile information. Access is restricted to the owner (the user with the matching userId).
 *  - /departments/{departmentId}: Stores department information. Publicly readable.
 *  - /roles/{roleId}: Stores role information. Publicly readable.
 *  - /kpi_categories/{kpiCategoryId}: Stores KPI category information. Publicly readable.
 *  - /departments/{departmentId}/kpis/{kpiId}: Stores KPI information, nested under departments. Writes are restricted.
 *  - /departments/{departmentId}/kpis/{kpiId}/submissions/{kpiSubmissionId}: Stores KPI submission data, nested under KPIs. Writes are restricted.
 * @keySecurityDecisions
 *  - User listing is disallowed to protect privacy.
 *  - Public read access is granted for /departments, /roles, and /kpi_categories.
 *  - Write access to KPIs and KPI Submissions is restricted.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the resource.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is the owner of the resource and the resource exists.
     *              This is used for update and delete operations to prevent acting on non-existent documents.
     * @param {string} userId The user ID to compare against the resource's userId.
     * @return {bool} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Defines a rule for documents in the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create a profile at /users/user123 if request.auth.uid == 'user123'
     * @allow (get, list) - User with UID 'user123' can read their own profile at /users/user123.
     * @allow (update, delete) - User with UID 'user123' can update/delete their own profile at /users/user123.
     * @deny (create) - User with UID 'user456' cannot create a profile at /users/user123.
     * @deny (get, list) - User with UID 'user456' cannot read the profile at /users/user123.
     * @deny (update, delete) - User with UID 'user456' cannot update/delete the profile at /users/user123.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User listing is not permitted.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines a rule for documents in the /departments/{departmentId} collection.
     * @path /departments/{departmentId}
     * @allow (get, list) - Any user (signed in or not) can read department information.
     * @deny (create, update, delete) - No one can create, update, or delete department information.
     * @principle Allows public read access but restricts write access to departments.
     */
    match /departments/{departmentId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Defines a rule for documents in the /roles/{roleId} collection.
     * @path /roles/{roleId}
     * @allow (get, list) - Any user (signed in or not) can read role information.
     * @deny (create, update, delete) - No one can create, update, or delete role information.
     * @principle Allows public read access but restricts write access to roles.
     */
    match /roles/{roleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Defines a rule for documents in the /kpi_categories/{kpiCategoryId} collection.
     * @path /kpi_categories/{kpiCategoryId}
     * @allow (get, list) - Any user (signed in or not) can read KPI category information.
     * @deny (create, update, delete) - No one can create, update, or delete KPI category information.
     * @principle Allows public read access but restricts write access to KPI categories.
     */
    match /kpi_categories/{kpiCategoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Defines a rule for documents in the /departments/{departmentId}/kpis/{kpiId} collection.
     * @path /departments/{departmentId}/kpis/{kpiId}
     * @deny (create, update, delete) - No one can create, update, or delete KPIs.
     */
    match /departments/{departmentId}/kpis/{kpiId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Defines a rule for documents in the /departments/{departmentId}/kpis/{kpiId}/submissions/{kpiSubmissionId} collection.
     * @path /departments/{departmentId}/kpis/{kpiId}/submissions/{kpiSubmissionId}
     * @deny (create, update, delete) - No one can create, update, or delete KPI submissions.
     */
    match /departments/{departmentId}/kpis/{kpiId}/submissions/{kpiSubmissionId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}