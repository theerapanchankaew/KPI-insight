/**
 * @fileOverview Firestore Security Rules for KPI Dashboard Application
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership, role-based access control, and public read permissions where appropriate.
 *
 * Data Structure:
 * - `/users/{userId}`: User profile information, readable and writable only by the user themselves.
 * - `/employees/{employeeId}`: Public employee data, readable by all authenticated users, writable by admins.
 * - `/departments/{departmentId}`: Department information, readable by all authenticated users, writable by admins.
 * - `/kpi_categories/{kpiCategoryId}`: KPI category information, readable by all authenticated users, writable by admins.
 * - `/kpi_catalog/{kpiId}`: Master list of KPIs, readable by all authenticated users, writable by admins.
 * - `/cascaded_kpis/{cascadedKpiId}`: KPIs cascaded to departments, readable by authenticated users, writable by managers/admins.
 * - `/individual_kpis/{individualKpiId}`: KPIs assigned to individual employees, readable by the assigned user and their manager, writable by manager/admin.
 * - `/kpi_submissions/{kpiSubmissionId}`: KPI submission data, readable by submitter and their manager.
 * - `/kpi_approvals/{kpiApprovalId}`: KPI approval records, readable by involved parties.
 * - `/reports/{reportId}`: Performance reports.
 * - `/settings/global`: Global application settings, readable by all authenticated users, writable only by admins.
 * - `/monthly_kpis/{monthlyKpiId}`: Monthly breakdown of corporate KPIs. Readable by authenticated users, writable by admins.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied for non-admins on the `/users` collection.
 * - Public read access is granted to collections that store organizational data.
 * - Strict ownership is enforced for user profiles.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own profile.
     *     - Request: { auth: { uid: 'user123' }, resource.data.id: 'user123' }
     * @allow (get, update, delete) User with ID 'user123' can read, update, and delete their own profile.
     *     - Request: { auth: { uid: 'user123' }, path: '/databases/(default)/documents/users/user123' }
     * @deny (create) User with ID 'user123' cannot create a profile with a mismatched ID.
     *     - Request: { auth: { uid: 'user123' }, resource.data.id: 'user456' }
     * @deny (update, delete) User with ID 'user123' cannot update or delete someone else's profile.
     *     - Request: { auth: { uid: 'user123' }, path: '/databases/(default)/documents/users/user456' }
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Only admins can list users

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to employee data.
     * @path /employees/{employeeId}
     * @allow (get, list) Any authenticated user can read employee data.
     *     - Request: { auth: { uid: 'user123' } }
     * @allow (create, update, delete) Only admins can create, update, or delete employee data.
     *     - Request: { auth: { uid: 'admin123', token: { role: 'Admin' } } }
     * @deny (create, update, delete) Non-admin users cannot modify employee data.
     *     - Request: { auth: { uid: 'user123', token: { role: 'Employee' } } }
     * @principle Allows public read access with restricted write access based on role.
     */
    match /employees/{employeeId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Controls access to department data.
     * @path /departments/{departmentId}
     * @allow (get, list) Any authenticated user can read department data.
     *     - Request: { auth: { uid: 'user123' } }
     * @allow (create, update, delete) Only admins can create, update, or delete department data.
     *     - Request: { auth: { uid: 'admin123', token: { role: 'Admin' } } }
     * @deny (create, update, delete) Non-admin users cannot modify department data.
     *     - Request: { auth: { uid: 'user123', token: { role: 'Employee' } } }
     * @principle Allows public read access with restricted write access based on role.
     */
    match /departments/{departmentId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Controls access to KPI category data.
     * @path /kpi_categories/{kpiCategoryId}
     * @allow (get, list) Any authenticated user can read KPI category data.
     *     - Request: { auth: { uid: 'user123' } }
     * @allow (create, update, delete) Only admins can create, update, or delete KPI category data.
     *     - Request: { auth: { uid: 'admin123', token: { role: 'Admin' } } }
     * @deny (create, update, delete) Non-admin users cannot modify KPI category data.
     *     - Request: { auth: { uid: 'user123', token: { role: 'Employee' } } }
     * @principle Allows public read access with restricted write access based on role.
     */
    match /kpi_categories/{kpiCategoryId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Controls access to the KPI catalog.
     * @path /kpi_catalog/{kpiId}
     * @allow (get, list) Any authenticated user can read KPI catalog data.
     *     - Request: { auth: { uid: 'user123' } }
     * @allow (create, update, delete) Only admins can create, update, or delete KPI catalog data.
     *     - Request: { auth: { uid: 'admin123', token: { role: 'Admin' } } }
     * @deny (create, update, delete) Non-admin users cannot modify KPI catalog data.
     *     - Request: { auth: { uid: 'user123', token: { role: 'Employee' } } }
     * @principle Allows public read access with restricted write access based on role.
     */
    match /kpi_catalog/{kpiId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Controls access to cascaded KPIs.
     * @path /cascaded_kpis/{cascadedKpiId}
     * @allow (get, list) Any authenticated user can read cascaded KPI data.
     *     - Request: { auth: { uid: 'user123' } }
     * @allow (create, update, delete) Only admins or managers can create, update, or delete cascaded KPI data.
     *     - Request: { auth: { uid: 'manager123', token: { role: 'Manager' } } }
     * @deny (create, update, delete) Non-admin/manager users cannot modify cascaded KPI data.
     *     - Request: { auth: { uid: 'user123', token: { role: 'Employee' } } }
     * @principle Allows public read access with restricted write access based on role.
     */
    match /cascaded_kpis/{cascadedKpiId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdmin() || isManager();
    }

    /**
     * @description Controls access to individual KPIs.
     * @path /individual_kpis/{individualKpiId}
     */
    match /individual_kpis/{individualKpiId} {
       allow get: if isSignedIn(); // TODO: Implement more fine-grained access control based on employee/manager relationship
       allow list: if isSignedIn(); // TODO: Implement more fine-grained access control based on employee/manager relationship
       allow create, update, delete: if isAdmin() || isManager(); // TODO: Further refine write rules
    }

    /**
     * @description Controls access to KPI submissions.
     * @path /kpi_submissions/{kpiSubmissionId}
     */
    match /kpi_submissions/{kpiSubmissionId} {
        allow get: if isSignedIn(); // TODO: Implement more fine-grained access control based on submitter/manager relationship
        allow list: if isSignedIn(); // TODO: Implement more fine-grained access control based on submitter/manager relationship
        allow create, update, delete: if false; // TODO: Implement appropriate write rules
    }

    /**
     * @description Controls access to KPI approvals.
     * @path /kpi_approvals/{kpiApprovalId}
     */
    match /kpi_approvals/{kpiApprovalId} {
        allow get: if isSignedIn(); // TODO: Implement more fine-grained access control based on approver/manager relationship
        allow list: if isSignedIn(); // TODO: Implement more fine-grained access control based on approver/manager relationship
        allow create, update, delete: if false; // TODO: Implement appropriate write rules
    }

    /**
     * @description Controls access to reports.
     * @path /reports/{reportId}
     */
    match /reports/{reportId} {
        allow get: if isSignedIn(); // TODO: Implement access control based on report ownership or roles
        allow list: if isSignedIn(); // TODO: Implement access control based on report ownership or roles
        allow create, update, delete: if false; // TODO: Implement appropriate write rules
    }

    /**
     * @description Controls access to global application settings.
     * @path /settings/global
     * @allow (get, list) Any authenticated user can read global settings.
     *     - Request: { auth: { uid: 'user123' } }
     * @allow (create, update, delete) Only admins can create, update, or delete global settings.
     *     - Request: { auth: { uid: 'admin123', token: { role: 'Admin' } } }
     * @deny (create, update, delete) Non-admin users cannot modify global settings.
     *     - Request: { auth: { uid: 'user123', token: { role: 'Employee' } } }
     * @principle Allows public read access with restricted write access based on role.
     */
    match /settings/global {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Controls access to monthly KPI data.
     * @path /monthly_kpis/{monthlyKpiId}
     * @allow (get, list) Any authenticated user can read monthly KPI data.
     *     - Request: { auth: { uid: 'user123' } }
     * @allow (create, update, delete) Only admins can create, update, or delete monthly KPI data.
     *     - Request: { auth: { uid: 'admin123', token: { role: 'Admin' } } }
     * @deny (create, update, delete) Non-admin users cannot modify monthly KPI data.
     *     - Request: { auth: { uid: 'user123', token: { role: 'Employee' } } }
     * @principle Allows public read access with restricted write access based on role.
     */
    match /monthly_kpis/{monthlyKpiId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

    function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }


  function isAdmin() {
    return isSignedIn() && request.auth.token.role == 'Admin';
  }

  function isManager() {
    return isSignedIn() && request.auth.token.role == 'Manager';
  }
}