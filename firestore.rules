rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (read, write) if the user is signed in and owns the profile (userId matches auth.uid).
     * @deny (read, write) if the user is not signed in or does not own the profile.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId} {
      // Check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Check if the user is the owner of the document.
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      // Allow a user to read their own profile.
      allow get: if isOwner(userId);
      // Allow the owner to list their data
      allow list: if isOwner(userId);

      // Allow a user to create their own profile if the userId matches their auth ID.
      allow create: if isSignedIn() && request.auth.uid == userId;

      // Allow a user to update their own profile.
      allow update: if isOwner(userId);

      // Allow a user to delete their own profile.
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to employee data.
     * @path /employees/{employeeId}
     * @allow (read) to all authenticated users.
     * @allow (write) only to admins.
     * @deny (write) to non-admins.
     * @principle Grants public read access, restricts writes to authorized roles.
     */
    match /employees/{employeeId} {
      // Check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Check if the user has the admin role.
      function isAdmin() {
        return isSignedIn() && request.auth.token.role is list && 'Admin' in request.auth.token.role;
      }

      // Allow all authenticated users to read employee data.
      allow get, list: if isSignedIn();

      // Allow admins to create employee data.
      allow create: if isAdmin();

      // Allow admins to update employee data.
      allow update: if isAdmin();

      // Allow admins to delete employee data.
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to department data.
     * @path /departments/{departmentId}
     * @allow (read) to all authenticated users.
     * @allow (write) only to admins.
     * @deny (write) to non-admins.
     * @principle Grants public read access, restricts writes to authorized roles.
     */
    match /departments/{departmentId} {
      // Check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Check if the user has the admin role.
      function isAdmin() {
        return isSignedIn() && request.auth.token.role is list && 'Admin' in request.auth.token.role;
      }

      // Allow all authenticated users to read department data.
      allow get, list: if isSignedIn();

      // Allow admins to create department data.
      allow create: if isAdmin();

      // Allow admins to update department data.
      allow update: if isAdmin();

      // Allow admins to delete department data.
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to KPI category data.
     * @path /kpi_categories/{kpiCategoryId}
     * @allow (read) to all authenticated users.
     * @allow (write) only to admins.
     * @deny (write) to non-admins.
     * @principle Grants public read access, restricts writes to authorized roles.
     */
    match /kpi_categories/{kpiCategoryId} {
      // Check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Check if the user has the admin role.
      function isAdmin() {
        return isSignedIn() && request.auth.token.role is list && 'Admin' in request.auth.token.role;
      }

      // Allow all authenticated users to read KPI category data.
      allow get, list: if isSignedIn();

      // Allow admins to create KPI category data.
      allow create: if isAdmin();

      // Allow admins to update KPI category data.
      allow update: if isAdmin();

      // Allow admins to delete KPI category data.
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to KPI data.
     * @path /kpi_catalog/{kpiId}
     * @allow (read) to all authenticated users.
     * @allow (write) only to admins.
     * @deny (write) to non-admins.
     * @principle Grants public read access, restricts writes to authorized roles.
     */
    match /kpi_catalog/{kpiId} {
      // Check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Check if the user has the admin role.
      function isAdmin() {
        return isSignedIn() && request.auth.token.role is list && 'Admin' in request.auth.token.role;
      }

      // Allow all authenticated users to read KPI data.
      allow get, list: if isSignedIn();

      // Allow admins to create KPI data.
      allow create: if isAdmin();

      // Allow admins to update KPI data.
      allow update: if isAdmin();

      // Allow admins to delete KPI data.
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to cascaded KPI data.
     * @path /cascaded_kpis/{cascadedKpiId}
     * @allow (read) to all authenticated users.
     * @allow (write) only to managers and admins.
     * @deny (write) to non-managers/admins.
     */
    match /cascaded_kpis/{cascadedKpiId} {
      // Check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Check if the user has the admin role.
      function isAdmin() {
        return isSignedIn() && request.auth.token.role is list && 'Admin' in request.auth.token.role;
      }

      // Check if the user has the manager role.
      function isManager() {
        return isSignedIn() && request.auth.token.role is list && ('Manager' in request.auth.token.role || 'VP' in request.auth.token.role || 'AVP' in request.auth.token.role);
      }

      // Allow all authenticated users to read cascaded KPI data.
      allow get, list: if isSignedIn();

      // Allow managers and admins to create cascaded KPI data.
      allow create: if isManager() || isAdmin();

      // Allow managers and admins to update cascaded KPI data.
      allow update: if isManager() || isAdmin();

      // Allow managers and admins to delete cascaded KPI data.
      allow delete: if isManager() || isAdmin();
    }

    /**
     * @description Controls access to individual KPI data.
     * @path /individual_kpis/{individualKpiId}
     */
    match /individual_kpis/{individualKpiId} {
      // Check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Check if the user has the admin role.
      function isAdmin() {
        return isSignedIn() && request.auth.token.role is list && 'Admin' in request.auth.token.role;
      }

      // Check if the user has the manager role.
      function isManager() {
        return isSignedIn() && request.auth.token.role is list && ('Manager' in request.auth.token.role || 'VP' in request.auth.token.role || 'AVP' in request.auth.token.role);
      }

      // Check if the user is the employee assigned to the KPI.
      function isAssignedEmployee(employeeId) {
        return isSignedIn() && request.auth.uid == employeeId;
      }

      // Allow get and list for assigned user or their manager
      allow get, list: if isSignedIn();
      // Allow managers and admins to create individual KPI data.
      allow create: if isManager() || isAdmin();

      // Allow managers and admins to update individual KPI data.
      allow update: if isManager() || isAdmin();

      // Allow managers and admins to delete individual KPI data.
      allow delete: if isManager() || isAdmin();
    }

    /**
     * @description Controls access to KPI submission data.
     * @path /kpi_submissions/{kpiSubmissionId}
     */
    match /kpi_submissions/{kpiSubmissionId} {
      // Check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Check if the user has the admin role.
      function isAdmin() {
        return isSignedIn() && request.auth.token.role is list && 'Admin' in request.auth.token.role;
      }

      // Check if the user is the submitter of the KPI.
      function isSubmitter(submittedByUserId) {
        return isSignedIn() && request.auth.uid == submittedByUserId;
      }
      function isExistingSubmitter(submittedByUserId) {
        return isSignedIn() && request.auth.uid == submittedByUserId;
      }

      // Allow read and list access to submitter.
      allow get, list: if isSignedIn();

      // Allow the submitter to create a KPI submission.
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.submittedByUserId;

      // Allow the submitter to update a KPI submission.
      allow update: if isSignedIn() && request.auth.uid == resource.data.submittedByUserId;

      // Allow the submitter to delete a KPI submission.
      allow delete: if isSignedIn() && request.auth.uid == resource.data.submittedByUserId;
    }

    /**
     * @description Controls access to KPI approval data.
     * @path /kpi_approvals/{kpiApprovalId}
     */
    match /kpi_approvals/{kpiApprovalId} {
      // Check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Check if the user has the admin role.
      function isAdmin() {
        return isSignedIn() && request.auth.token.role is list && 'Admin' in request.auth.token.role;
      }

      // Check if the user is the approver of the KPI.
      function isApprover(approvedByUserId) {
        return isSignedIn() && request.auth.uid == approvedByUserId;
      }
      function isExistingApprover(approvedByUserId) {
                return isSignedIn() && request.auth.uid == approvedByUserId;
      }

      // Allow read and list access to approver
      allow get, list: if isSignedIn();

      // Allow the approver to create a KPI approval.
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.approvedByUserId;

      // Allow the approver to update a KPI approval.
      allow update: if isSignedIn() && request.auth.uid == resource.data.approvedByUserId;

      // Allow the approver to delete a KPI approval.
      allow delete: if isSignedIn() && request.auth.uid == resource.data.approvedByUserId;
    }

    /**
     * @description Controls access to report data.
     * @path /reports/{reportId}
     */
    match /reports/{reportId} {
      // Check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Check if the user has the admin role.
      function isAdmin() {
        return isSignedIn() && request.auth.token.role is list && 'Admin' in request.auth.token.role;
      }

      // Allow anyone to read reports.
      allow get, list: if isSignedIn();

      // Allow admins to create reports.
      allow create: if isAdmin();

      // Allow admins to update reports.
      allow update: if isAdmin();

      // Allow admins to delete reports.
      allow delete: if isAdmin();
    }

     /**
      * @description Controls access to global application settings.
      * @path /settings/global
      */
    match /settings/global {
      // Check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Check if the user has the admin role.
      function isAdmin() {
        return isSignedIn() && request.auth.token.role is list && 'Admin' in request.auth.token.role;
      }

      // Allow all authenticated users to read the global settings.
      allow get, list: if isSignedIn();

      // Allow admins to create or overwrite the global settings.
      allow create, update: if isAdmin();

      // Allow admins to delete the global settings.
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to monthly KPI data.
     * @path /monthly_kpis/{monthlyKpiId}
     * @allow (read) to all authenticated users.
     * @allow (write) only to admins.
     * @deny (write) to non-admins.
     * @principle Grants public read access, restricts writes to authorized roles.
     */
    match /monthly_kpis/{monthlyKpiId} {
      // Check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Check if the user has the admin role.
      function isAdmin() {
        return isSignedIn() && request.auth.token.role is list && 'Admin' in request.auth.token.role;
      }

      // Allow all authenticated users to read monthly KPI data.
      allow get, list: if isSignedIn();

      // Allow admins to create monthly KPI data.
      allow create: if isAdmin();

      // Allow admins to update monthly KPI data.
      allow update: if isAdmin();

      // Allow admins to delete monthly KPI data.
      allow delete: if isAdmin();
    }
  }
}