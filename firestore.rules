/**
 * @fileoverview Firestore Security Rules for the KPI Dashboard application.
 *
 * Core Philosophy:
 * This ruleset implements a hybrid security model, balancing open read access for public data with strict ownership and role-based access control for sensitive data.
 *
 * Data Structure:
 * - User profiles are stored under `/users/{userId}`.
 * - Employee, Department, KPI Category, and KPI Catalog data are stored in top-level collections.
 *
 * Key Security Decisions:
 * - Users can only read/write their own profile data.
 * - Listing the `/users` collection is restricted to admins.
 * - Public data (employees, departments, KPI catalog) is readable by all authenticated users.
 * - Writes to public data are restricted to admins.
 * - The ruleset denormalizes user roles to grant administrative privileges.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by an authenticated user.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is an existing owner of the document.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the authenticated user has the 'Admin' role.
     */
    function isAdmin() {
      return request.auth.token.role == 'Admin';
    }

    /******************** User Profile Rules ********************/

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (get) Authenticated user can read their own profile.
     * @allow (create) Authenticated user can create their own profile (self-registration).
     * @allow (update) Authenticated user can update their own profile.
     * @allow (delete) Authenticated user can delete their own profile.
     * @deny (get) User attempts to read another user's profile.
     * @deny (create) User attempts to create a profile with a mismatched ID.
     * @deny (update) User attempts to update another user's profile.
     * @deny (delete) User attempts to delete another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if isAdmin();
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /******************** Employee Rules ********************/

    /**
     * @description Controls access to employee documents.
     * @path /employees/{employeeId}
     * @allow (get) Any authenticated user can read employee data.
     * @allow (list) Any authenticated user can list employee data.
     * @allow (create) Only admins can create employee data.
     * @allow (update) Only admins can update employee data.
     * @allow (delete) Only admins can delete employee data.
     * @deny (create) Non-admin users attempt to create employee data.
     * @deny (update) Non-admin users attempt to update employee data.
     * @deny (delete) Non-admin users attempt to delete employee data.
     */
    match /employees/{employeeId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /******************** Department Rules ********************/

    /**
     * @description Controls access to department documents.
     * @path /departments/{departmentId}
     * @allow (get) Any authenticated user can read department data.
     * @allow (list) Any authenticated user can list department data.
     * @allow (create) Only admins can create department data.
     * @allow (update) Only admins can update department data.
     * @allow (delete) Only admins can delete department data.
     * @deny (create) Non-admin users attempt to create department data.
     * @deny (update) Non-admin users attempt to update department data.
     * @deny (delete) Non-admin users attempt to delete department data.
     */
    match /departments/{departmentId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /******************** KPI Category Rules ********************/

    /**
     * @description Controls access to KPI category documents.
     * @path /kpi_categories/{kpiCategoryId}
     * @allow (get) Any authenticated user can read KPI category data.
     * @allow (list) Any authenticated user can list KPI category data.
     * @allow (create) Only admins can create KPI category data.
     * @allow (update) Only admins can update KPI category data.
     * @allow (delete) Only admins can delete KPI category data.
     * @deny (create) Non-admin users attempt to create KPI category data.
     * @deny (update) Non-admin users attempt to update KPI category data.
     * @deny (delete) Non-admin users attempt to delete KPI category data.
     */
    match /kpi_categories/{kpiCategoryId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /******************** KPI Catalog Rules ********************/

    /**
     * @description Controls access to KPI documents in the catalog.
     * @path /kpi_catalog/{kpiId}
     * @allow (get) Any authenticated user can read KPI data.
     * @allow (list) Any authenticated user can list KPI data.
     * @allow (create) Only admins can create KPI data.
     * @allow (update) Only admins can update KPI data.
     * @allow (delete) Only admins can delete KPI data.
     * @deny (create) Non-admin users attempt to create KPI data.
     * @deny (update) Non-admin users attempt to update KPI data.
     * @deny (delete) Non-admin users attempt to delete KPI data.
     */
    match /kpi_catalog/{kpiId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

        /******************** Cascaded KPI Rules ********************/

    /**
     * @description Controls access to cascaded KPI documents.
     * @path /cascaded_kpis/{cascadedKpiId}
     */
    match /cascaded_kpis/{cascadedKpiId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

        /******************** Individual KPI Rules ********************/

    /**
     * @description Controls access to individual KPI documents.
     * @path /individual_kpis/{individualKpiId}
     */
    match /individual_kpis/{individualKpiId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

        /******************** KPI Submissions Rules ********************/

    /**
     * @description Controls access to KPI submissions documents.
     * @path /kpi_submissions/{kpiSubmissionId}
     */
    match /kpi_submissions/{kpiSubmissionId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

        /******************** KPI Approvals Rules ********************/

    /**
     * @description Controls access to KPI approvals documents.
     * @path /kpi_approvals/{kpiApprovalId}
     */
    match /kpi_approvals/{kpiApprovalId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

        /******************** Reports Rules ********************/

    /**
     * @description Controls access to reports documents.
     * @path /reports/{reportId}
     */
    match /reports/{reportId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

        /******************** Settings Rules ********************/

    /**
     * @description Controls access to settings documents.
     * @path /settings/global
     */
     match /settings/global {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
    
        /******************** Monthly KPIs Rules ********************/

    /**
     * @description Controls access to monthly kpis documents.
     * @path /monthly_kpis/{monthlyKpiId}
     */
    match /monthly_kpis/{monthlyKpiId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
  }
}