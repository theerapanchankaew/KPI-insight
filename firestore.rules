/**
 * @file Firestore Security Rules
 * @description This ruleset enforces role-based access control and data ownership for the KPI Dashboard application.
 *
 * Core Philosophy:
 *  - Authenticated users can read public data.
 *  - Users can only read and write their own profile data.
 *  - Administrators have full access to manage all data.
 *  - Data consistency is enforced through path-based and data-based validation.
 *
 * Data Structure:
 *  - User profiles are stored under `/users/{userId}`.
 *  - Employee and department data are stored under `/employees/{employeeId}` and `/departments/{departmentId}` respectively.
 *  - KPI-related data is stored under `/kpi_catalog/{kpiId}`, `/kpi_submissions/{kpiSubmissionId}`, and `/kpi_approvals/{kpiApprovalId}`.
 *  - Monthly KPI data is stored under `/monthly_kpis/{monthlyKpiId}`.
 *  - Application settings are stored under `/settings/global`.
 *
 * Key Security Decisions:
 *  - Listing the `/users` collection is restricted to admins only.
 *  - Data validation focuses on relational integrity and critical authorization fields.
 *  - The `settings/global` document is publicly readable but admin-writable.
 *
 * Role-Based Access Control:
 *  - The `isAdmin()` function checks for the presence of an "Admin" role in the user's custom claims.
 *  - Other roles like "VP", "AVP", "Manager", and "Employee" can be used for more granular access control in the future.
 *
 * Denormalization for Authorization:
 *  - KpiSubmission includes `submittedByUserId` to easily check ownership.
 *  - KpiApproval includes `approvedByUserId` to easily track approvers.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is an admin.
     * @returns {boolean} True if the user has the "Admin" role, false otherwise.
     */
    function isAdmin() {
      return request.auth.token.role == "Admin";
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @returns {boolean} True if the user IDs match, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing document.
     * @param {string} userId The user ID of the document's owner.
     * @returns {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (get) User with ID 'user123' can read their own profile.
     * @allow (create) User with ID 'user123' can create their own profile.
     * @allow (update) User with ID 'user123' can update their own profile.
     * @allow (delete) User with ID 'user123' can delete their own profile.
     * @allow (list) Admin can list all user profiles.
     * @deny (get) User with ID 'user456' cannot read the profile of user 'user123'.
     * @deny (create) User with ID 'user456' cannot create a profile for user 'user123'.
     * @deny (update) User with ID 'user456' cannot update the profile of user 'user123'.
     * @deny (delete) User with ID 'user456' cannot delete the profile of user 'user123'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if isAdmin();
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for employee data.
     * @path /employees/{employeeId}
     * @allow (get) Any authenticated user can read employee data.
     * @allow (create) Only admins can create employee data.
     * @allow (update) Only admins can update employee data.
     * @allow (delete) Only admins can delete employee data.
     * @allow (list) Any authenticated user can list employee data.
     * @deny (create) Non-admin users cannot create employee data.
     * @deny (update) Non-admin users cannot update employee data.
     * @deny (delete) Non-admin users cannot delete employee data.
     * @principle Restricts write access to admins for managing employee information.
     */
    match /employees/{employeeId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for department data.
     * @path /departments/{departmentId}
     * @allow (get) Any authenticated user can read department data.
     * @allow (create) Only admins can create department data.
     * @allow (update) Only admins can update department data.
     * @allow (delete) Only admins can delete department data.
     * @allow (list) Any authenticated user can list department data.
     * @deny (create) Non-admin users cannot create department data.
     * @deny (update) Non-admin users cannot update department data.
     * @deny (delete) Non-admin users cannot delete department data.
     * @principle Restricts write access to admins for managing department information.
     */
    match /departments/{departmentId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for KPI category data.
     * @path /kpi_categories/{kpiCategoryId}
     * @allow (get) Any authenticated user can read KPI category data.
     * @allow (create) Only admins can create KPI category data.
     * @allow (update) Only admins can update KPI category data.
     * @allow (delete) Only admins can delete KPI category data.
     * @allow (list) Any authenticated user can list KPI category data.
     * @deny (create) Non-admin users cannot create KPI category data.
     * @deny (update) Non-admin users cannot update KPI category data.
     * @deny (delete) Non-admin users cannot delete KPI category data.
     * @principle Restricts write access to admins for managing KPI category information.
     */
    match /kpi_categories/{kpiCategoryId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for KPI catalog data.
     * @path /kpi_catalog/{kpiId}
     * @allow (get) Any authenticated user can read KPI catalog data.
     * @allow (create) Only admins can create KPI catalog data.
     * @allow (update) Only admins can update KPI catalog data.
     * @allow (delete) Only admins can delete KPI catalog data.
     * @allow (list) Any authenticated user can list KPI catalog data.
     * @deny (create) Non-admin users cannot create KPI catalog data.
     * @deny (update) Non-admin users cannot update KPI catalog data.
     * @deny (delete) Non-admin users cannot delete KPI catalog data.
     * @principle Restricts write access to admins for managing KPI catalog information.
     */
    match /kpi_catalog/{kpiId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for cascaded KPIs.
     * @path /cascaded_kpis/{cascadedKpiId}
     */
    match /cascaded_kpis/{cascadedKpiId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for individual KPIs.
     * @path /individual_kpis/{individualKpiId}
     */
    match /individual_kpis/{individualKpiId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for KPI submissions.
     * @path /kpi_submissions/{kpiSubmissionId}
     */
    match /kpi_submissions/{kpiSubmissionId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Rules for KPI approvals.
     * @path /kpi_approvals/{kpiApprovalId}
     */
    match /kpi_approvals/{kpiApprovalId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Rules for reports.
     * @path /reports/{reportId}
     */
    match /reports/{reportId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for global settings.
     * @path /settings/global
     */
    match /settings/global {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for monthly KPIs.
     * @path /monthly_kpis/{monthlyKpiId}
     */
    match /monthly_kpis/{monthlyKpiId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
  }
}