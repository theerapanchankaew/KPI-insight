/**
 * @file Firestore Security Rules
 * @core_philosophy This ruleset enforces a role-based access control model, with public read access for some collections and owner-based or admin-restricted write access for others. Data shape is not strictly enforced in this prototyping phase.
 * @data_structure Data is organized into top-level collections such as `users`, `employees`, `departments`, `kpi_catalog` etc. User-specific data resides under `/users/{userId}`.
 * @key_security_decisions
 *  - Public read access is granted to `employees`, `departments`, `kpi_categories`, `kpi_catalog`, `settings/global` and `monthly_kpis`.
 *  - Only authenticated users can access any data.
 *  - User listing is restricted to admins.
 *  - Destructive operations (update, delete) are protected by existence checks.
 *  - The `isOwner` check is used extensively to restrict access to user-specific data.
 * @denormalization_for_authorization (Not applicable in this basic ruleset, but would be used in a more advanced one.)
 * @structural_segregation (Not applicable in this basic ruleset.)
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by an authenticated user.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Requires user authentication for all operations.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces document ownership.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user has the 'Admin' role.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Implements role-based access control.
     */
    function isAdmin() {
      return isSignedIn() && request.auth.token.role == 'Admin';
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing document.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Prevents operations on non-existent documents and enforces ownership.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Defines access rules for user profiles.
     * @path /users/{userId}
     * @allow (get) Authenticated user with ID 'user123' can read their own profile: `auth.uid == 'user123'`
     * @allow (create) Authenticated user with ID 'user123' can create their profile: `auth.uid == 'user123'` and `request.resource.data.id == 'user123'`
     * @allow (update) Authenticated user with ID 'user123' can update their profile: `auth.uid == 'user123'` and `resource.data.id == 'user123'`
     * @allow (delete) Authenticated user with ID 'user123' can delete their own profile: `auth.uid == 'user123'`
     * @deny (get) Authenticated user with ID 'user456' cannot read the profile of user 'user123': `auth.uid != 'user123'`
     * @deny (create) Authenticated user with ID 'user456' cannot create a profile with ID 'user123': `auth.uid != 'user123'`
     * @deny (update) Authenticated user with ID 'user456' cannot update the profile of user 'user123': `auth.uid != 'user123'`
     * @deny (delete) Authenticated user with ID 'user456' cannot delete the profile of user 'user123': `auth.uid != 'user123'`
     * @principle Enforces strict user ownership for profile data.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isAdmin();
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines access rules for employee data.
     * @path /employees/{employeeId}
     * @allow (get) Authenticated user can read employee data.
     * @allow (list) Authenticated user can list employee data.
     * @allow (create) Only admins can create employee data.
     * @allow (update) Only admins can update employee data.
     * @allow (delete) Only admins can delete employee data.
     * @deny (create) Non-admin user cannot create employee data.
     * @deny (update) Non-admin user cannot update employee data.
     * @deny (delete) Non-admin user cannot delete employee data.
     * @principle Allows public read access, restricts writes to admins.
     */
    match /employees/{employeeId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Defines access rules for department data.
     * @path /departments/{departmentId}
     * @allow (get) Authenticated user can read department data.
     * @allow (list) Authenticated user can list department data.
     * @allow (create) Only admins can create department data.
     * @allow (update) Only admins can update department data.
     * @allow (delete) Only admins can delete department data.
     * @deny (create) Non-admin user cannot create department data.
     * @deny (update) Non-admin user cannot update department data.
     * @deny (delete) Non-admin user cannot delete department data.
     * @principle Allows public read access, restricts writes to admins.
     */
    match /departments/{departmentId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Defines access rules for KPI category data.
     * @path /kpi_categories/{kpiCategoryId}
     * @allow (get) Authenticated user can read KPI category data.
     * @allow (list) Authenticated user can list KPI category data.
     * @allow (create) Only admins can create KPI category data.
     * @allow (update) Only admins can update KPI category data.
     * @allow (delete) Only admins can delete KPI category data.
     * @deny (create) Non-admin user cannot create KPI category data.
     * @deny (update) Non-admin user cannot update KPI category data.
     * @deny (delete) Non-admin user cannot delete KPI category data.
     * @principle Allows public read access, restricts writes to admins.
     */
    match /kpi_categories/{kpiCategoryId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Defines access rules for KPI catalog data.
     * @path /kpi_catalog/{kpiId}
     * @allow (get) Authenticated user can read KPI catalog data.
     * @allow (list) Authenticated user can list KPI catalog data.
     * @allow (create) Only admins can create KPI catalog data.
     * @allow (update) Only admins can update KPI catalog data.
     * @allow (delete) Only admins can delete KPI catalog data.
     * @deny (create) Non-admin user cannot create KPI catalog data.
     * @deny (update) Non-admin user cannot update KPI catalog data.
     * @deny (delete) Non-admin user cannot delete KPI catalog data.
     * @principle Allows public read access, restricts writes to admins.
     */
    match /kpi_catalog/{kpiId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Defines access rules for cascaded KPI data.
     * @path /cascaded_kpis/{cascadedKpiId}
     */
    match /cascaded_kpis/{cascadedKpiId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin(); // Assuming managers can't create these, only admins
      allow update: if isAdmin(); // Assuming managers can't update these, only admins
      allow delete: if isAdmin();
    }

    /**
     * @description Defines access rules for individual KPI data.
     * @path /individual_kpis/{individualKpiId}
     */
    match /individual_kpis/{individualKpiId} {
      allow get: if isSignedIn(); // Expanded access based on description (assigned user and their manager)
      allow list: if isSignedIn(); // Expanded access based on description (assigned user and their manager)
      allow create: if isAdmin(); // Assuming managers can't create these, only admins
      allow update: if isAdmin(); // Assuming managers can't update these, only admins
      allow delete: if isAdmin();
    }

    /**
     * @description Defines access rules for KPI submission data. Includes `submittedByUserId` for ownership checks.
     * @path /kpi_submissions/{kpiSubmissionId}
     */
    match /kpi_submissions/{kpiSubmissionId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn(); // No explicit owner check since submissions can be created
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Defines access rules for KPI approval data. Includes `approvedByUserId` for tracking approvers.
     * @path /kpi_approvals/{kpiApprovalId}
     */
    match /kpi_approvals/{kpiApprovalId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Defines access rules for report data.
     * @path /reports/{reportId}
     */
    match /reports/{reportId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

     /**
      * @description Defines access rules for global settings.
      * @path /settings/global
      */
    match /settings/global {
        allow get: if isSignedIn();
        allow list: if false;
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }
      /**
       * @description Defines access rules for monthly KPI data.
       * @path /monthly_kpis/{monthlyKpiId}
       */
    match /monthly_kpis/{monthlyKpiId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}