/**
 * @fileoverview Firestore Security Rules.
 *
 * Core Philosophy:
 * This ruleset prioritizes strict authorization based on ownership and role-based access control.
 * It avoids complex data validation in favor of rapid prototyping.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles.
 * - /departments/{departmentId}: Stores department information.
 * - /kpis/{kpiId}: Stores Key Performance Indicators, each with an 'ownerId' field.
 * - /submissions/{submissionId}: Stores KPI submission data.
 * - /kpi_catalog/{kpiId}: Stores KPI catalog data.
 * - /employees/{employeeId}: Stores employee data.
 *
 * Key Security Decisions:
 * - User profiles are private and only accessible to the owning user.
 * - KPIs are secured via owner-based access control using the `ownerId` field.
 * - Data validation is minimized to focus on authorization.
 *
 * Denormalization for Authorization:
 * - The 'Kpi' entity MUST include an 'ownerId' field that references the User who owns the KPI.
 *   This enables efficient owner-based security rules without requiring extra reads.
 *
 * Structural Segregation:
 * - No public vs. private data segregation is implemented in this initial ruleset.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profiles. Only the user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create, update, delete): If the authenticated user's ID matches the userId in the path.
     * @deny (create, update, delete): If the authenticated user's ID does not match the userId in the path.
     * @principle Enforces user-ownership.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages department information.
     * @path /departments/{departmentId}
     * @allow (get, list): Public read access.
     * @allow (create, update, delete): Not allowed.
     * @principle Restricts write access to departments.
     */
    match /departments/{departmentId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages KPI data.  Requires 'ownerId' field.
     * @path /kpis/{kpiId}
     * @allow (get, list): Public read access.
     * @allow (create): Only if the 'ownerId' in the data matches the authenticated user's ID.
     * @allow (update, delete): Only if the authenticated user is the owner of the KPI.
     * @deny (create, update, delete): If the 'ownerId' field is missing, or if the user is not the owner.
     * @principle Enforces ownership for KPI writes.
     */
    match /kpis/{kpiId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.ownerId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Manages KPI submission data.
     * @path /submissions/{submissionId}
     * @allow (get, list): Public read access.
     * @allow (create, update, delete): Not allowed.
     * @principle Restricts write access to submissions.
     */
    match /submissions/{submissionId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages KPI catalog data.
     * @path /kpi_catalog/{kpiId}
     * @allow (get, list): Public read access.
     * @allow (create, update, delete): Not allowed.
     */
    match /kpi_catalog/{kpiId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages employee data.
     * @path /employees/{employeeId}
     * @allow (get, list): Public read access.
     * @allow (create, update, delete): Not allowed.
     */
    match /employees/{employeeId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}