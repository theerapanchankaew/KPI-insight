/**
 * @fileoverview Firestore Security Rules for the KPI Dashboard application.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on user roles and ownership.
 * It implements role-based access control (RBAC) and enforces strict ownership for user-specific data.
 * Read access is generally more permissive, while write access is tightly controlled.
 *
 * Data Structure:
 * - `/users/{userId}`: User profiles, accessible only to the user themselves and admins.
 * - `/employees/{employeeId}`: Public employee data, readable by all authenticated users, writable only by admins.
 * - `/departments/{departmentId}`: Department information, readable by authenticated users, writable by admins.
 * - `/kpi_categories/{kpiCategoryId}`: KPI categories, readable by authenticated users, writable by admins.
 * - `/kpi_catalog/{kpiId}`: Corporate KPIs, readable by authenticated users, writable only by admins.
 * - `/cascaded_kpis/{cascadedKpiId}`: KPIs cascaded to departments, readable by authenticated users, writable by managers/admins.
 * - `/individual_kpis/{individualKpiId}`: KPIs assigned to individual employees, readable by the assigned user and their manager, writable by managers/admins. Status updatable by employee.
 * - `/kpi_submissions/{kpiSubmissionId}`: KPI submission data, readable by submitter and their manager.
 * - `/kpi_approvals/{kpiApprovalId}`: KPI approval records, readable by involved parties.
 * - `/reports/{reportId}`: Performance reports, access control can be implemented using security rules.
 * - `/settings/global`: Global application settings, readable by all authenticated users, writable only by admins.
 * - `/monthly_kpis/{monthlyKpiId}`: Monthly breakdown of corporate KPIs, readable by authenticated users, writable by admins.
 *
 * Key Security Decisions:
 * - Listing of the `/users` collection is explicitly denied to all but Admin roles.
 * - Helper functions are used to abstract complex logic and improve readability.
 * - Data validation is limited to critical fields required for authorization and relational integrity.
 *
 * Denormalization for Authorization:
 *  - The rules rely on the `submittedByUserId` field in the `KpiSubmission` documents to determine ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @example isSignedIn() == true if request.auth != null
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document.
     * @param {string} userId - The user ID to compare against the request's auth UID.
     * @example isOwner('user123') == (request.auth.uid == 'user123')
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an existing owner of the document.
     * @param {string} userId - The user ID to compare against the resource data and request's auth UID.
     * @example isExistingOwner('user123') == (isSignedIn() && request.auth.uid == 'user123' && resource != null)
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource.data.id == request.auth.uid;
    }

    /**
     * @description Checks if the user has the 'Admin' role.
     * @example isAdmin() == (request.auth.token.role == 'Admin')
     */
    function isAdmin() {
      return isSignedIn() && request.auth.token.role == 'Admin';
    }

    /**
     * @description Checks if the user has the 'Manager' role.
     * @example isManager() == (request.auth.token.role == 'Manager')
     */
    function isManager() {
      return isSignedIn() && (request.auth.token.role == 'Manager' || isAdmin());
    }

    /**
     * @description Checks if the user is the document's manager based on departmentId.
     * @param {string} departmentId - The department ID to check for.
     * @example isDepartmentManager('salesDept')
     */
    function isDepartmentManager(departmentId) {
        return false;
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (get) Signed-in user can read their own profile.
     * @allow (create) Signed-in user can create their own profile.
     * @allow (update) Signed-in user can update their own profile.
     * @deny (list) Non-admin users cannot list all profiles.
     * @deny (create) Signed-in user cannot create a profile for another user.
     * @deny (update) Signed-in user cannot update another user's profile.
     * @principle Enforces document ownership for writes. Restricts listing to admins.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if isAdmin();
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for employee data.
     * @path /employees/{employeeId}
     * @allow (get) Any signed-in user can read employee data.
     * @allow (list) Any signed-in user can list employee data.
     * @allow (create) Only admins can create employee data.
     * @allow (update) Only admins can update employee data.
     * @allow (delete) Only admins can delete employee data.
     * @principle Public read, admin-only writes.
     */
    match /employees/{employeeId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for department data.
     * @path /departments/{departmentId}
     * @allow (get) Any signed-in user can read department data.
     * @allow (list) Any signed-in user can list department data.
     * @allow (create) Only admins can create department data.
     * @allow (update) Only admins can update department data.
     * @allow (delete) Only admins can delete department data.
     * @principle Public read, admin-only writes.
     */
    match /departments/{departmentId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for KPI category data.
     * @path /kpi_categories/{kpiCategoryId}
     * @allow (get) Any signed-in user can read KPI category data.
     * @allow (list) Any signed-in user can list KPI category data.
     * @allow (create) Only admins can create KPI category data.
     * @allow (update) Only admins can update KPI category data.
     * @allow (delete) Only admins can delete KPI category data.
     * @principle Public read, admin-only writes.
     */
    match /kpi_categories/{kpiCategoryId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for KPI catalog data.
     * @path /kpi_catalog/{kpiId}
     * @allow (get) Any signed-in user can read KPI catalog data.
     * @allow (list) Any signed-in user can list KPI catalog data.
     * @allow (create) Only admins can create KPI catalog data.
     * @allow (update) Only admins can update KPI catalog data.
     * @allow (delete) Only admins can delete KPI catalog data.
     * @principle Public read, admin-only writes.
     */
    match /kpi_catalog/{kpiId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for cascaded KPIs.
     * @path /cascaded_kpis/{cascadedKpiId}
     * @allow (get) Any signed-in user can read cascaded KPI data.
     * @allow (list) Any signed-in user can list cascaded KPI data.
     * @allow (create) Only managers/admins can create cascaded KPI data.
     * @allow (update) Only managers/admins can update cascaded KPI data.
     * @allow (delete) Only managers/admins can delete cascaded KPI data.
     * @principle Authenticated read, manager/admin-only writes.
     */
    match /cascaded_kpis/{cascadedKpiId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isManager();
      allow update: if isManager();
      allow delete: if isManager();
    }

    /**
     * @description Rules for individual KPIs.
     * @path /individual_kpis/{individualKpiId}
     */
    match /individual_kpis/{individualKpiId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn(); // TODO: Refine list to only allow users to list their own or their direct reports' KPIs

      // Managers/Admins can create
      allow create: if isManager();

      // Managers/Admins can update.  Employee can update status.
      allow update: if isManager() || (isSignedIn() && request.resource.data.employeeId == request.auth.uid);

      // Managers/Admins can delete.
      allow delete: if isManager();
    }

    /**
     * @description Rules for KPI submissions.
     * @path /kpi_submissions/{kpiSubmissionId}
     */
    match /kpi_submissions/{kpiSubmissionId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn(); // TODO: Refine list to only allow users to list their own submissions

      // Only the user themselves can create kpi submissions
      allow create: if isSignedIn() && request.resource.data.submittedByUserId == request.auth.uid;

      // Only the user themselves or their manager can update kpi submissions
      allow update: if (isSignedIn() && request.auth.uid == resource.data.submittedByUserId) || isManager();

      allow delete: if false; // No delete allowed.
    }

    /**
     * @description Rules for KPI approvals.
     * @path /kpi_approvals/{kpiApprovalId}
     */
    match /kpi_approvals/{kpiApprovalId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn(); // TODO: Refine list access

      allow create: if isSignedIn();
      allow update: if isManager();
      allow delete: if false; // No deletes.
    }

    /**
     * @description Rules for reports.
     * @path /reports/{reportId}
     */
    match /reports/{reportId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();

      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

     /**
      * @description Rules for global application settings.
      * @path /settings/global
      */
    match /settings/global {
      allow get: if isSignedIn();
      allow list: if false;

      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

     /**
      * @description Rules for monthly KPIs.
      * @path /monthly_kpis/{monthlyKpiId}
      */
    match /monthly_kpis/{monthlyKpiId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();

      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}