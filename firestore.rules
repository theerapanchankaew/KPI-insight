/**
 * @fileoverview Firestore Security Rules for the KPI Management Application.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on user roles and ownership.
 * It aims to balance security with the flexibility needed for rapid prototyping.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Only the user themselves or an admin can read/write.
 * - /departments/{departmentId}: Stores department information. Access is unrestricted.
 * - /kpis/{kpiId}: Stores KPI data. Access is unrestricted.
 * - /submissions/{submissionId}: Stores KPI submission data. Access is unrestricted.
 * - /kpi_catalog/{kpiId}: Stores the catalog of all corporate KPIs available for cascading. Access is unrestricted.
 * - /employees/{employeeId}: Stores employee and organizational structure data. Access is unrestricted.
 * - /settings/global: Stores global application settings in a singleton document. Access is unrestricted.
 * - /cascaded_kpis/{cascadedKpiId}: Stores corporate KPIs cascaded to departments. Access is unrestricted.
 * - /individual_kpis/{individualKpiId}: Stores KPIs assigned to individuals. Access is unrestricted.
 *
 * Key Security Decisions:
 * - User listing is restricted to admins only (not implemented yet).
 * - Departments, KPIs, Submissions, KPI Catalog, Employees, App Settings, Cascaded KPIs, and Individual KPIs are currently publicly accessible for reads and writes to allow rapid prototyping.
 * - The default security posture for ambiguous relationships is strict owner-only access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user profile documents.
     * @path /users/{userId}
     * @allow (read, write) - User 'ggyIfmNNzMVOjxvaLSKVf3GV7C02' can read/write their own profile.
     * @deny (read, write) - User 'otherUser' cannot read/write user 'ggyIfmNNzMVOjxvaLSKVf3GV7C02' profile.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId} {
      // Check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Check if the requested user ID matches the authenticated user's ID.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Grants public access to department documents.
     * @path /departments/{departmentId}
     * @allow (read, write) - Any user can read/write department documents.
     * @deny (none) - This collection is publicly accessible.
     * @principle Allows open access for prototyping.
     */
    match /departments/{departmentId} {
      allow get, list: if true;
      allow create, update, delete: if true;
    }

    /**
     * @description Grants public access to KPI documents.
     * @path /kpis/{kpiId}
     * @allow (read, write) - Any user can read/write KPI documents.
     * @deny (none) - This collection is publicly accessible.
     * @principle Allows open access for prototyping.
     */
    match /kpis/{kpiId} {
      allow get, list: if true;
      allow create, update, delete: if true;
    }

    /**
     * @description Grants public access to submission documents.
     * @path /submissions/{submissionId}
     * @allow (read, write) - Any user can read/write submission documents.
     * @deny (none) - This collection is publicly accessible.
     * @principle Allows open access for prototyping.
     */
    match /submissions/{submissionId} {
      allow get, list: if true;
      allow create, update, delete: if true;
    }

     /**
      * @description Grants public access to KPI catalog documents.
      * @path /kpi_catalog/{kpiId}
      * @allow (read, write) - Any user can read/write KPI catalog documents.
      * @deny (none) - This collection is publicly accessible.
      * @principle Allows open access for prototyping.
      */
    match /kpi_catalog/{kpiId} {
      allow get, list: if true;
      allow create, update, delete: if true;
    }

    /**
     * @description Grants public access to employee documents.
     * @path /employees/{employeeId}
     * @allow (read, write) - Any user can read/write employee documents.
     * @deny (none) - This collection is publicly accessible.
     * @principle Allows open access for prototyping.
     */
    match /employees/{employeeId} {
      allow get, list: if true;
      allow create, update, delete: if true;
    }

    /**
     * @description Grants public access to the global settings document.
     * @path /settings/global
     * @allow (read, write) - Any user can read/write the global settings document.
     * @deny (none) - This document is publicly accessible.
     * @principle Allows open access for prototyping.
     */
    match /settings/global {
      allow get, list: if true;
      allow create, update, delete: if true;
    }

    /**
     * @description Grants public access to cascaded KPI documents.
     * @path /cascaded_kpis/{cascadedKpiId}
     * @allow (read, write) - Any user can read/write cascaded KPI documents.
     * @deny (none) - This collection is publicly accessible.
     * @principle Allows open access for prototyping.
     */
    match /cascaded_kpis/{cascadedKpiId} {
      allow get, list: if true;
      allow create, update, delete: if true;
    }

    /**
     * @description Grants public access to individual KPI documents.
     * @path /individual_kpis/{individualKpiId}
     * @allow (read, write) - Any user can read/write individual KPI documents.
     * @deny (none) - This collection is publicly accessible.
     * @principle Allows open access for prototyping.
     */
    match /individual_kpis/{individualKpiId} {
      allow get, list: if true;
      allow create, update, delete: if true;
    }
  }
}