/**
 * @fileoverview Firestore Security Rules for the KPI Dashboard application.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on user roles and ownership.
 * It implements role-based access control and enforces strict ownership for user-specific data.
 *
 * Data Structure:
 * - /users/{userId}: User profile information, accessible to the user and admins.
 * - /employees/{employeeId}: Employee data, readable by all authenticated users, writable by admins.
 * - /departments/{departmentId}: Department data, readable by all authenticated users, writable by admins.
 * - /kpi_categories/{kpiCategoryId}: KPI category data, readable by all authenticated users, writable by admins.
 * - /kpi_catalog/{kpiId}: Corporate KPIs, readable by all authenticated users, writable by admins.
 * - /cascaded_kpis/{cascadedKpiId}: KPIs cascaded to departments, readable by all authenticated users, writable by managers/admins.
 * - /individual_kpis/{individualKpiId}: KPIs assigned to individual employees, readable by the assigned user and their manager, writable by managers/admins. Status updatable by employee.
 * - /kpi_submissions/{kpiSubmissionId}: KPI submission data, readable by the submitter and their manager.
 * - /kpi_approvals/{kpiApprovalId}: KPI approval records, readable by involved parties.
 * - /reports/{reportId}: Performance reports, access control to be further defined.
 * - /settings/global: Global application settings, readable by all authenticated users, writable by admins.
 * - /monthly_kpis/{monthlyKpiId}: Monthly breakdown of corporate KPIs, readable by all authenticated users, writable by admins.
 *
 * Key Security Decisions:
 * - User listing is restricted to admins only.
 * - Data validation is minimal in this prototyping phase, focusing on authorization and relational integrity.
 * - Authenticated users can read public collections such as employees, departments and kpi catalogs.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user profiles.
     * @path /users/{userId}
     * @allow (get, list) if isOwner(userId)
     * @allow (create) if isOwner(userId)
     * @allow (update, delete) if isExistingOwner(userId)
     * @deny (get, list) if !isSignedIn()
     * @deny (create, update, delete) if !isSignedIn()
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if isAdmin();
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Grants access to employee data.
     * @path /employees/{employeeId}
     * @allow (get, list) if isSignedIn()
     * @allow (create, update, delete) if isAdmin()
     * @deny (create, update, delete) if !isSignedIn()
     * @principle Allows any authenticated user to read employee data, but restricts writes to admins.
     */
    match /employees/{employeeId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Grants access to department data.
     * @path /departments/{departmentId}
     * @allow (get, list) if isSignedIn()
     * @allow (create, update, delete) if isAdmin()
     * @deny (create, update, delete) if !isSignedIn()
     * @principle Allows any authenticated user to read department data, but restricts writes to admins.
     */
    match /departments/{departmentId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Grants access to KPI category data.
     * @path /kpi_categories/{kpiCategoryId}
     * @allow (get, list) if isSignedIn()
     * @allow (create, update, delete) if isAdmin()
     * @deny (create, update, delete) if !isSignedIn()
     * @principle Allows any authenticated user to read KPI category data, but restricts writes to admins.
     */
    match /kpi_categories/{kpiCategoryId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Grants access to KPI catalog data.
     * @path /kpi_catalog/{kpiId}
     * @allow (get, list) if isSignedIn()
     * @allow (create, update, delete) if isAdmin()
     * @deny (create, update, delete) if !isSignedIn()
     * @principle Allows any authenticated user to read KPI catalog data, but restricts writes to admins.
     */
    match /kpi_catalog/{kpiId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Grants access to cascaded KPI data.
     * @path /cascaded_kpis/{cascadedKpiId}
     * @allow (get, list) if isSignedIn()
     * @allow (create, update, delete) if isManager() || isAdmin()
     * @deny (create, update, delete) if !isSignedIn()
     * @principle Allows any authenticated user to read cascaded KPI data, but restricts writes to managers/admins.
     */
    match /cascaded_kpis/{cascadedKpiId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isManager() || isAdmin();
      allow update: if isManager() || isAdmin();
      allow delete: if isManager() || isAdmin();
    }

    /**
     * @description Grants access to individual KPI data.
     * @path /individual_kpis/{individualKpiId}
     */
    match /individual_kpis/{individualKpiId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isManager() || isAdmin();
      allow update: if isManager() || isAdmin();
      allow delete: if isManager() || isAdmin();
    }

    /**
     * @description Grants access to KPI submission data.
     * @path /kpi_submissions/{kpiSubmissionId}
     * TODO: Implement access control based on submitter and manager roles.
     */
    match /kpi_submissions/{kpiSubmissionId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Grants access to KPI approval data.
     * @path /kpi_approvals/{kpiApprovalId}
     * TODO: Implement access control based on approver and involved parties.
     */
    match /kpi_approvals/{kpiApprovalId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Grants access to report data.
     * @path /reports/{reportId}
     * TODO: Implement access control for reports.
     */
    match /reports/{reportId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Grants access to global application settings.
     * @path /settings/global
     * @allow get: if isSignedIn();
     * @allow update: if isAdmin();
     * @deny write: if !isAdmin();
     * @principle Allows any authenticated user to read global settings, but restricts writes to admins.
     */
    match /settings/global {
       allow get: if isSignedIn();
       allow list: if false;
       allow create: if isAdmin();
       allow update: if isAdmin();
       allow delete: if isAdmin();
    }
    
    /**
     * @description Grants access to monthly KPI data.
     * @path /monthly_kpis/{monthlyKpiId}
     * @allow (get, list) if isSignedIn()
     * @allow (create, update, delete) if isAdmin()
     * @deny (create, update, delete) if !isSignedIn()
     * @principle Allows any authenticated user to read monthly KPI data, but restricts writes to admins.
     */
    match /monthly_kpis/{monthlyKpiId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    function isAdmin() {
      return isSignedIn() && request.auth.token.role == 'Admin';
    }

    function isManager() {
      return isSignedIn() && (request.auth.token.role == 'Manager' || request.auth.token.role == 'VP' || request.auth.token.role == 'AVP');
    }
  }
}