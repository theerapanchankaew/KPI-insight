/**
 * @file Firestore Security Rules
 * @description This ruleset enforces role-based access control for a KPI dashboard application.
 *
 * Core Philosophy:
 * The security model focuses on least privilege, granting users access only to the data they need.
 *  - Users can read their own profiles.
 *  - Admins have broad access to manage employees, departments, KPIs, and settings.
 *  - Managers have write access to cascade and assign KPIs.
 *  - Employees can update the status of their individual KPIs.
 *
 * Data Structure:
 * The Firestore database is organized into top-level collections for employees, departments,
 * KPI categories, KPIs, cascaded KPIs, individual KPIs, KPI submissions, KPI approvals, reports,
 * settings, and monthly KPIs. User profiles are stored under the `/users/{userId}` path.
 *
 * Key Security Decisions:
 *  - Listing the `/users` collection is restricted to admins to protect user privacy.
 *  - Read access to the settings document is open to all authenticated users to allow
 *    access to global configurations.
 *  - Write access to most collections (employees, departments, KPIs, settings, monthly KPIs)
 *    is restricted to admins.
 *  - "Cascaded KPIs" can be written by managers/admins.
 *
 * Denormalization for Authorization:
 * The rules rely on the `request.auth.token.role` custom claim to determine user roles.
 * It's assumed that this claim is set and managed by a trusted backend process.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own user profile. Admins can read all profiles.
     * @path /users/{userId}
     * @allow (get, update) if isOwner(userId)
     * @allow (get) if isAdmin()
     * @allow (create) if isSelfCreation(userId)
     * @deny (list) Always deny listing to protect user data.
     * @deny (delete) if true;
     * @principle Enforces user ownership for profile data.
     */
    match /users/{userId} {
      // Read permissions: owner or admin
      allow get: if isOwner(userId) || isAdmin();
      allow list: if isAdmin(); // Only admins can list all users
      // Write permissions: only the owner can create/update, and only if the ID matches
      allow create: if isSelfCreation(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if false; // No one can delete a user
    }

    /**
     * @description Allows any authenticated user to read employee data, but only admins can write.
     * @path /employees/{employeeId}
     * @allow (get, list) if isSignedIn()
     * @allow (create, update, delete) if isAdmin()
     * @deny   create, update, delete: if !isAdmin();
     * @principle Restricts write access to employee data to admins only.
     */
    match /employees/{employeeId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Allows any authenticated user to read department data, but only admins can write.
     * @path /departments/{departmentId}
     * @allow (get, list) if isSignedIn()
     * @allow (create, update, delete) if isAdmin()
     * @deny   create, update, delete: if !isAdmin();
     * @principle Restricts write access to department data to admins only.
     */
    match /departments/{departmentId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Allows any authenticated user to read KPI category data, but only admins can write.
     * @path /kpi_categories/{kpiCategoryId}
     * @allow (get, list) if isSignedIn()
     * @allow (create, update, delete) if isAdmin()
     * @deny   create, update, delete: if !isAdmin();
     * @principle Restricts write access to KPI category data to admins only.
     */
    match /kpi_categories/{kpiCategoryId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Allows any authenticated user to read KPI catalog data, but only admins can write.
     * @path /kpi_catalog/{kpiId}
     * @allow (get, list) if isSignedIn()
     * @allow (create, update, delete) if isAdmin()
     * @deny   create, update, delete: if !isAdmin();
     * @principle Restricts write access to KPI catalog data to admins only.
     */
    match /kpi_catalog/{kpiId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Allows authenticated users to read cascaded KPI data, but only managers and admins can write.
     * @path /cascaded_kpis/{cascadedKpiId}
     * @allow (get, list) if isSignedIn()
     * @allow (create, update, delete) if isManager() || isAdmin()
     * @deny create, update, delete: if !(isManager() || isAdmin());
     * @principle Restricts write access to cascaded KPI data to managers and admins.
     */
    match /cascaded_kpis/{cascadedKpiId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isManager() || isAdmin();
    }

    /**
     * @description Allows access to individual KPIs, with role-based restrictions.
     * @path /individual_kpis/{individualKpiId}
     */
    match /individual_kpis/{individualKpiId} {
      allow get, list: if isSignedIn(); // TODO: Add more granular read rules (owner/manager)
      allow create, update, delete: if isManager() || isAdmin(); // Only manager/admin can create/update
    }

    /**
     * @description Allows access to KPI submissions.
     * @path /kpi_submissions/{kpiSubmissionId}
     */
    match /kpi_submissions/{kpiSubmissionId} {
      allow get, list: if isSignedIn(); // TODO: Add more granular read rules (owner/manager)
      allow create, update, delete: if isManager() || isAdmin(); // Only manager/admin can create/update
    }

    /**
     * @description Allows access to KPI approvals.
     * @path /kpi_approvals/{kpiApprovalId}
     */
    match /kpi_approvals/{kpiApprovalId} {
      allow get, list: if isSignedIn(); // TODO: Add more granular read rules (owner/manager)
      allow create, update, delete: if isManager() || isAdmin(); // Only manager/admin can create/update
    }

    /**
     * @description Allows access to reports.
     * @path /reports/{reportId}
     */
    match /reports/{reportId} {
      allow get, list: if isSignedIn(); // TODO: Add more granular read rules
      allow create, update, delete: if isManager() || isAdmin(); // Only manager/admin can create/update
    }

    /**
     * @description Allows any authenticated user to read global settings, but only admins can write.
     * @path /settings/global
     * @allow (get) if isSignedIn()
     * @allow (update) if isAdmin()
     * @deny   create, delete: if true;
     * @principle Restricts write access to global settings to admins only.
     */
    match /settings/global {
        allow get: if isSignedIn();
        allow create: if false; // prevent accidental creation
        allow update: if isAdmin();
        allow delete: if false;
        allow list: if false; //Global document can only be get and update
    }

    /**
     * @description Allows any authenticated user to read monthly KPI data, but only admins can write.
     * @path /monthly_kpis/{monthlyKpiId}
     * @allow (get, list) if isSignedIn()
     * @allow (create, update, delete) if isAdmin()
     * @deny   create, update, delete: if !isAdmin();
     * @principle Restricts write access to monthly KPI data to admins only.
     */
    match /monthly_kpis/{monthlyKpiId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    // ---- Helper functions ----
    function isSignedIn() {
      return request.auth != null;
    }

    function isAdmin() {
      return isSignedIn() && request.auth.token.role == 'Admin';
    }

    function isManager() {
      return isSignedIn() && (request.auth.token.role == 'Manager' || request.auth.token.role == 'VP' || request.auth.token.role == 'AVP');
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    function isSelfCreation(userId) {
        return isSignedIn() && request.auth.uid == userId && request.resource.data.id == userId;
    }
  }
}