/**
 * @fileoverview Firestore Security Rules for the KPI Management Application.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on user roles and ownership.
 * It implements a principle of least privilege, granting only the necessary permissions to each user.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles.
 * - /departments/{departmentId}: Stores department information.
 * - /kpis/{kpiId}: Stores KPI data. Includes denormalized 'ownerId' for authorization independence.
 * - /submissions/{submissionId}: Stores KPI submission data.
 * - /kpi_catalog/{kpiId}: Stores the catalog of all corporate KPIs available for cascading.
 * - /employees/{employeeId}: Stores employee and organizational structure data.
 * - /settings/global: Stores global application settings in a singleton document.
 * - /cascaded_kpis/{cascadedKpiId}: Stores corporate KPIs cascaded to departments.
 * - /individual_kpis/{individualKpiId}: Stores KPIs assigned to individuals.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data under `/users/{userId}`.
 * - Listing of users is disallowed except for Admin users.
 * - The `/settings/global` document is read-only for all users and writable by Admin only.
 * - All write operations require authentication.
 *
 * Denormalization for Authorization:
 * - The `Kpi` entity includes an `ownerId` field, enabling ownership-based access control without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Defines the condition for allowing an admin user.
     * @return {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
        return isSignedIn() && (request.auth.token.role == 'Admin');
    }
    
    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own profile.
     *   request.auth.uid == 'user123'
     *   request.resource.data.id == 'user123'
     * @allow (get) User with ID 'user123' can read their own profile.
     *   request.auth.uid == 'user123'
     * @allow (update) User with ID 'user123' can update their own profile.
     *   request.auth.uid == 'user123'
     * @deny (create) User with ID 'user123' cannot create a profile for 'user456'.
     *   request.auth.uid == 'user123'
     *   request.resource.data.id == 'user456'
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if isAdmin(); // Only Admins can list users.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id; //Immutable id
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for departments.
     * @path /departments/{departmentId}
     * @allow (get) Any signed-in user can read department information.
     *   request.auth.uid != null
     * @allow (create) Only an admin can create department
     *   request.auth.token.role == 'Admin'
     * @deny (create) A non-admin user cannot create a new department.
     *   request.auth.token.role == 'Employee'
     * @principle Departments are generally readable, but creation is admin-restricted.
     */
    match /departments/{departmentId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for KPIs.
     * @path /kpis/{kpiId}
     * @allow (create) User with ID 'user123' can create a KPI with ownerId 'user123'.
     *   request.auth.uid == 'user123'
     *   request.resource.data.ownerId == 'user123'
     * @allow (get) Any signed-in user can read KPI information.
     *   request.auth.uid != null
     * @allow (update) User with ID 'user123' can update a KPI they own.
     *   request.auth.uid == 'user123'
     *   resource.data.ownerId == 'user123'
     * @deny (create) User with ID 'user123' cannot create a KPI with ownerId 'user456'.
     *   request.auth.uid == 'user123'
     *   request.resource.data.ownerId == 'user456'
     * @principle Enforces document ownership for writes based on the 'ownerId' field.
     */
    match /kpis/{kpiId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.ownerId);
      allow delete: if isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Rules for submissions.
     * @path /submissions/{submissionId}
     * @allow (create) Any signed-in user can create a submission.
     *   request.auth.uid != null
     * @allow (get) Any signed-in user can read submission data.
     *   request.auth.uid != null
     * @allow (update) Only the user who submitted the KPI can update the submission.
     *   request.auth.uid == resource.data.submittedBy
     * @deny (update) A different user cannot update the submission.
     *   request.auth.uid != resource.data.submittedBy
     * @principle Submission writes are restricted to the submitting user.
     */
    match /submissions/{submissionId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.submittedBy == request.auth.uid;
      allow update: if isSignedIn() && resource != null && request.auth.uid == resource.data.submittedBy;
      allow delete: if isSignedIn() && resource != null && request.auth.uid == resource.data.submittedBy;
    }

    /**
     * @description Rules for the KPI catalog.
     * @path /kpi_catalog/{kpiId}
     * @allow (get) Any signed-in user can read the KPI catalog.
     *   request.auth.uid != null
     * @allow (create) Only Admin can create a kpi in the catalog
     *   request.auth.token.role == 'Admin'
     * @principle The KPI catalog is readable by all, writable by admins only.
     */
    match /kpi_catalog/{kpiId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for employees.
     * @path /employees/{employeeId}
     * @allow (get) Any signed-in user can read employee information.
     *   request.auth.uid != null
     * @allow (create) Only an admin can create employees
     *   request.auth.token.role == 'Admin'
     * @principle Employee data is generally readable, but creation is admin-restricted.
     */
    match /employees/{employeeId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for global settings.
     * @path /settings/global
     * @allow (get) Any signed-in user can read the global settings.
     *   request.auth.uid != null
     * @allow (update) Only an admin can update the global settings
     *   request.auth.token.role == 'Admin'
     * @principle Global settings are readable by all, writable by admins only.
     */
    match /settings/global {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if false;
      allow update: if isAdmin() && resource != null;
      allow delete: if false;
    }

    /**
     * @description Rules for cascaded KPIs.
     * @path /cascaded_kpis/{cascadedKpiId}
     * @allow (get) Any signed-in user can read cascaded KPI data.
     *   request.auth.uid != null
     * @allow (list) Any signed-in user can list cascaded KPI data.
     *   request.auth.uid != null
     * @allow (create) Only Admin can create
     *    request.auth.token.role == 'Admin'
     * @principle Public read, Admin write.
     */
    match /cascaded_kpis/{cascadedKpiId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for individual KPIs.
     * @path /individual_kpis/{individualKpiId}
     * @allow (get) Any signed-in user can read individual KPI data.
     *   request.auth.uid != null
     * @allow (list) Any signed-in user can list individual KPI data.
     *   request.auth.uid != null
     * @allow (create) User can create a KPI for themself, by matching the employeeId and the request.auth.uid
     *    request.resource.data.employeeId == request.auth.uid
     * @principle Owner can create, Public read.
     */
    match /individual_kpis/{individualKpiId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.employeeId == request.auth.uid;
      allow update: if isSignedIn() && resource != null && request.resource.data.employeeId == request.auth.uid;
      allow delete: if isSignedIn() && resource != null && request.resource.data.employeeId == request.auth.uid;
    }
  }
}