/**
 * @fileoverview Firestore Security Rules for the KPI Management Application.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on user roles and ownership.
 * It uses a flexible data shape approach for rapid prototyping, focusing on
 * authorization rather than strict schema validation.
 *
 * Data Structure:
 * The Firestore database consists of several top-level collections: `users`,
 * `departments`, `kpis`, `submissions`, `kpi_catalog`, `employees`,
 * `settings`, `cascaded_kpis`, and `individual_kpis`. Each collection stores
 * data related to its namesake entity. Some collections (e.g., `/users/{userId}`)
 * are scoped to individual users, while others are globally accessible with
 * restricted write permissions (e.g., `kpi_catalog`).
 *
 * Key Security Decisions:
 * - User data is primarily private, accessible only to the user themselves.
 * - Listing of all users is disallowed for non-Admin roles.
 * - Public read access is granted to the `kpi_catalog` collection, but write
 *   access is restricted.
 * - The `settings/global` document is read-only for non-admins.
 * - Data required for authorization decisions (e.g., ownership) is denormalized
 *   onto the documents to avoid costly `get()` calls in the rules.
 *
 * Authorization Denormalization:
 * - The `Kpi` entity includes an `ownerId` field, enabling direct ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId The user ID to compare against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user ID matches the resource's ownerId. Also verifies that the document exists.
     * @param {string} userId The user ID to compare against.
     * @return {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has the 'Admin' role.
     * @return {boolean} True if the user has the 'Admin' role, false otherwise.
     */
    function isAdmin() {
        return isSignedIn() && (request.auth.token.role == 'Admin');
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User 'testUser' with ID 'testUser' can create their profile.
     * @allow (get, update, delete) User 'testUser' with ID 'testUser' can read, update, and delete their profile.
     * @deny (create) User 'testUser' cannot create a profile with ID 'anotherUser'.
     * @principle Enforces user-ownership for profile management.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for departments.
     * @path /departments/{departmentId}
     * @allow (get, list) Anyone can read department information.
     * @deny (create, update, delete) Only admins can manage department data.
     * @principle Restricts department management to admins.
     */
    match /departments/{departmentId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for KPIs.
     * @path /kpis/{kpiId}
     * @allow (get, list) Anyone can read KPI data.
     * @allow (create) User can create a KPI if they are the owner.
     * @allow (update, delete) Only the KPI owner can update or delete it.
     * @deny (create) User cannot create a KPI for another user.
     * @principle Enforces ownership for KPI management.
     */
    match /kpis/{kpiId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.ownerId);
      allow delete: if isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Rules for submissions.
     * @path /submissions/{submissionId}
     * @allow (get, list) Anyone can read submission data.
     * @allow (create) Any signed-in user can create a submission.
     * @deny (update, delete) Only admins can update or delete submissions.
     * @principle Restricts submission management to admins.
     */
    match /submissions/{submissionId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for the KPI catalog.
     * @path /kpi_catalog/{kpiId}
     * @allow (get, list) Anyone can read the KPI catalog.
     * @deny (create, update, delete) Only admins can manage the KPI catalog.
     * @principle Restricts catalog management to admins.
     */
    match /kpi_catalog/{kpiId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for employees.
     * @path /employees/{employeeId}
     * @allow (get, list) Anyone can read employee data.
     * @deny (create, update, delete) Only admins can manage employee data.
     * @principle Restricts employee management to admins.
     */
    match /employees/{employeeId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for global settings.
     * @path /settings/global
     * @allow (get) Any signed-in user can read the global settings.
     * @deny (list, create, update, delete) Only admins can modify global settings.
     * @principle Restricts settings management to admins.
     */
    match /settings/global {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for cascaded KPIs.
     * @path /cascaded_kpis/{cascadedKpiId}
     * @allow (get, list) Anyone can read cascaded KPI data.
     * @deny (create, update, delete) Only admins can manage cascaded KPIs.
     * @principle Restricts cascaded KPI management to admins.
     */
    match /cascaded_kpis/{cascadedKpiId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for individual KPIs.
     * @path /individual_kpis/{individualKpiId}
     * @allow (get) Any signed-in user can read individual KPI data.
     * @allow (list) Any signed-in user can list individual KPI data.
     * @deny (create, update, delete) Only admins can manage individual KPIs.
     * @principle Restricts individual KPI management to admins.
     */
    match /individual_kpis/{individualKpiId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}