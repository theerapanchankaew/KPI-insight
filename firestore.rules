/**
 * @fileoverview Firestore Security Rules for the KPI Dashboard application.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on user roles and ownership.
 * It aims to strike a balance between strict authorization and rapid prototyping.
 *
 * Data Structure:
 * - User profiles are stored under `/users/{userId}`.
 * - Employee and department data are stored under `/employees/{employeeId}` and `/departments/{departmentId}` respectively.
 * - KPI data (categories, master catalog, cascaded and individual KPIs) is stored under `/kpi_categories/{kpiCategoryId}`, `/kpi_catalog/{kpiId}`, `/cascaded_kpis/{cascadedKpiId}`, and `/individual_kpis/{individualKpiId}`.
 * - KPI Submissions and Approvals are stored under `/kpi_submissions/{kpiSubmissionId}` and `/kpi_approvals/{kpiApprovalId}`.
 * - Reports are stored under `/reports/{reportId}`.
 * - Global settings are stored in a single document at `/settings/global`.
 * - Monthly KPI data is stored under `/monthly_kpis/{monthlyKpiId}`
 *
 * Key Security Decisions:
 * - User listing is denied to prevent unauthorized access to user data.
 * - Public read access is granted to certain collections (e.g., `employees`, `kpi_catalog`) to facilitate broader data visibility.
 * - Role-based access control is implemented using custom claims (e.g., `isAdmin()`).
 * - Data validation is limited to authorization-critical fields to allow for flexible data shapes during prototyping.
 *
 * Denormalization for Authorization:
 *  - The data model already includes fields like `submittedByUserId` and `approvedByUserId` that are helpful for authorization.  No further denormalization is required at this time.
 *
 * Structural Segregation:
 *  - Private user data is stored under `/users/{userId}` to restrict access based on ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @path N/A (Helper function)
     * @allow N/A (Helper function)
     * @deny N/A (Helper function)
     * @principle Verifies user authentication.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user's ID matches the provided user ID.
     * @path N/A (Helper function)
     * @allow N/A (Helper function)
     * @deny N/A (Helper function)
     * @principle Enforces document ownership.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user's ID matches the provided user ID and that the resource exists.
     * @path N/A (Helper function)
     * @allow N/A (Helper function)
     * @deny N/A (Helper function)
     * @principle Enforces document ownership and resource existence.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has the 'Admin' role.
     * @path N/A (Helper function)
     * @allow N/A (Helper function)
     * @deny N/A (Helper function)
     * @principle Implements role-based access control.
     */
    function isAdmin() {
      return isSignedIn() && request.auth.token.role == 'Admin';
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (get, update, delete) if the user is the owner. (create) if the user ID matches the authenticated user ID.
     * @deny (get, update, delete) if the user is not the owner. (create) if the user ID does not match the authenticated user ID.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not permitted.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for employee data.
     * @path /employees/{employeeId}
     * @allow (get, list) to all authenticated users. (create, update, delete) to admins only.
     * @deny (create, update, delete) to non-admins.
     * @principle Grants public read access and restricts write access to admins.
     */
    match /employees/{employeeId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for department data.
     * @path /departments/{departmentId}
     * @allow (get, list) to all authenticated users. (create, update, delete) to admins only.
     * @deny (create, update, delete) to non-admins.
     * @principle Grants public read access and restricts write access to admins.
     */
    match /departments/{departmentId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for KPI category data.
     * @path /kpi_categories/{kpiCategoryId}
     * @allow (get, list) to all authenticated users. (create, update, delete) to admins only.
     * @deny (create, update, delete) to non-admins.
     * @principle Grants public read access and restricts write access to admins.
     */
    match /kpi_categories/{kpiCategoryId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for KPI catalog data.
     * @path /kpi_catalog/{kpiId}
     * @allow (get, list) to all authenticated users. (create, update, delete) to admins only.
     * @deny (create, update, delete) to non-admins.
     * @principle Grants public read access and restricts write access to admins.
     */
    match /kpi_catalog/{kpiId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for cascaded KPI data.
     * @path /cascaded_kpis/{cascadedKpiId}
     * @allow (get, list) to all authenticated users. (create, update, delete) to admins and managers.
     * @deny (create, update, delete) to non-admins and non-managers.
     * @principle Grants public read access and restricts write access to admins/managers.
     */
    match /cascaded_kpis/{cascadedKpiId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin(); // TODO: Add manager role check
      allow update: if isAdmin() && resource != null; // TODO: Add manager role check
      allow delete: if isAdmin() && resource != null; // TODO: Add manager role check
    }

    /**
     * @description Rules for individual KPI data.
     * @path /individual_kpis/{individualKpiId}
     * @allow (get, list) to the assigned user and their manager. (create, update, delete) to manager/admin.
     * @deny (create, update, delete) to non-managers and non-admins.
     * @principle Restricts read access to the assigned user and their manager, and write access to managers/admins.
     */
    match /individual_kpis/{individualKpiId} {
      allow get, list: if isSignedIn(); // TODO: Add assigned user/manager check
      allow create: if isAdmin(); // TODO: Add manager role check
      allow update: if isAdmin() && resource != null; // TODO: Add manager role check
      allow delete: if isAdmin() && resource != null; // TODO: Add manager role check
    }

    /**
     * @description Rules for KPI submission data.
     * @path /kpi_submissions/{kpiSubmissionId}
     * @allow (get, list) to the submitter and their manager. (create, update, delete) to submitter and manager.
     * @deny (create, update, delete) to non-submitters and non-managers.
     * @principle Restricts read access to the submitter and their manager.
     */
    match /kpi_submissions/{kpiSubmissionId} {
      allow get, list: if isSignedIn(); // TODO: Add submitter/manager check
      allow create: if isSignedIn(); // TODO: Add submitter/manager check
      allow update: if isSignedIn() && resource != null; // TODO: Add submitter/manager check
      allow delete: if isSignedIn() && resource != null; // TODO: Add submitter/manager check
    }

    /**
     * @description Rules for KPI approval data.
     * @path /kpi_approvals/{kpiApprovalId}
     * @allow (get, list) to involved parties. (create, update, delete) to approvers.
     * @deny (create, update, delete) to non-approvers.
     * @principle Restricts access to involved parties.
     */
    match /kpi_approvals/{kpiApprovalId} {
      allow get, list: if isSignedIn(); // TODO: Add involved parties check
      allow create: if isSignedIn(); // TODO: Add approver check
      allow update: if isSignedIn() && resource != null; // TODO: Add approver check
      allow delete: if isSignedIn() && resource != null; // TODO: Add approver check
    }

    /**
     * @description Rules for report data.
     * @path /reports/{reportId}
     * @allow get, list, create, update, delete: if false; // TODO: Define appropriate access control rules
     * @deny N/A
     * @principle Requires specific access control rules to be defined.
     */
    match /reports/{reportId} {
      allow get, list: if isSignedIn(); // TODO: Refine access as needed
      allow create: if isAdmin(); // TODO: refine access as needed
      allow update: if isAdmin() && resource != null; // TODO: refine access as needed
      allow delete: if isAdmin() && resource != null; // TODO: refine access as needed
    }

    /**
     * @description Rules for global application settings.
     * @path /settings/global
     * @allow (get, list) to all authenticated users. (create, update, delete) to admins only.
     * @deny (create, update, delete) to non-admins.
     * @principle Grants public read access and restricts write access to admins.
     */
    match /settings/global {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for Monthly KPI data.
     * @path /monthly_kpis/{monthlyKpiId}
     * @allow (get, list) to all authenticated users. (create, update, delete) to admins only.
     * @deny (create, update, delete) to non-admins.
     * @principle Grants public read access and restricts write access to admins.
     */
    match /monthly_kpis/{monthlyKpiId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
  }
}