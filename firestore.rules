/**
 * @file Firebase Security Rules for KPI Dashboard Application
 *
 * @core_philosophy This ruleset employs a combination of role-based and ownership-based access control.
 *   - Data is generally readable by authenticated users unless explicitly restricted.
 *   - Write access is restricted based on user roles (e.g., admin, manager) and/or ownership of the data.
 *   - Read access for users collection is restricted for admin only.
 *
 * @data_structure The Firestore database is structured as follows:
 *   - `/users/{userId}`: User profile information, accessible to the user and admins.
 *   - `/employees/{employeeId}`: Employee data, publicly readable, writable by admins.
 *   - `/departments/{departmentId}`: Department data, readable, writable by admins.
 *   - `/kpi_categories/{kpiCategoryId}`: KPI categories, readable, writable by admins.
 *   - `/kpi_catalog/{kpiId}`: Corporate KPIs, readable, writable by admins.
 *   - `/cascaded_kpis/{cascadedKpiId}`: KPIs cascaded to departments, readable, writable by managers/admins.
 *   - `/individual_kpis/{individualKpiId}`: KPIs assigned to individual employees, readable by the assigned user and their manager, writable by managers/admins.
 *   - `/kpi_submissions/{kpiSubmissionId}`: KPI submission data, readable by submitter and their manager.
 *   - `/kpi_approvals/{kpiApprovalId}`: KPI approval records, readable by involved parties.
 *   - `/reports/{reportId}`: Performance reports, access control to be determined.
 *   - `/settings/global`: Global application settings, readable, writable by admins.
 *   - `/monthly_kpis/{monthlyKpiId}`: Monthly KPI data, readable, writable by admins.
 *
 * @key_security_decisions
 *   - Listing the `/users` collection is explicitly denied for non-admin users to protect user privacy.
 *   - Data validation is minimized in this prototyping phase, focusing on authorization and relational integrity.
 *   - Helper functions are used to encapsulate complex logic and improve readability.
 *
 * @denormalization_for_authorization
 *   - The `kpi_submissions` documents MUST include `submittedByUserId` to avoid `get()` calls and enforce the owner-only write access for the user.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param {string} userId The user ID to compare against.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an admin.
     * @return {bool} True if the user has the "Admin" role, false otherwise.
     */
    function isAdmin() {
      return isSignedIn() && request.auth.token.role == "Admin";
    }

    /**
     * @description Checks if the user is a manager
     * @return {bool} True if the user has the "Manager" role, false otherwise.
     */
    function isManager() {
        return isSignedIn() && request.auth.token.role == "Manager";
    }

    /**
     * @description Check if the user is an existing owner.
     * @param {string} userId The user ID to compare against.
     * @return {bool} True if the user is the owner and the document exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Defines rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile if request.auth.uid == 'user123' and request.resource.data.id == 'user123'.
     * @allow (get) User with UID 'user123' can read their profile if request.auth.uid == 'user123'.
     * @allow (update) User with UID 'user123' can update their profile if request.auth.uid == 'user123'.
     * @allow (delete) User with UID 'user123' can delete their profile if request.auth.uid == 'user123' and the document exists.
     * @deny (create) User with UID 'user123' cannot create a profile for 'user456'.
     * @deny (update) User with UID 'user123' cannot update a profile for 'user456'.
     * @deny (delete) User with UID 'user123' cannot delete a profile for 'user456' if the document does not exist.
     * @principle Enforces document ownership for writes; restricts access to a user's own data tree.
     */
    match /users/{userId} {
      // Only the user can read their own profile, or an admin
      allow get: if isOwner(userId) || isAdmin();
      // Only admin can list all the user profiles
      allow list: if isAdmin();

      // A user can create their own profile, enforcing that the ID in the document matches their auth UID
      allow create: if isOwner(userId) && request.resource.data.id == userId;

      // A user can update their own profile. Enforce immutability of the user ID.
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;

      // A user can delete their own profile, but only if it exists
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines rules for employees.
     * @path /employees/{employeeId}
     * @allow (get) Any authenticated user can read employee data.
     * @allow (list) Any authenticated user can list employee data.
     * @allow (create) Only admins can create employee data.
     * @allow (update) Only admins can update employee data.
     * @allow (delete) Only admins can delete employee data.
     * @deny (create) Non-admin users cannot create employee data.
     * @deny (update) Non-admin users cannot update employee data.
     * @deny (delete) Non-admin users cannot delete employee data.
     * @principle Publicly readable, admin-only writes.
     */
    match /employees/{employeeId} {
      // Readable by all authenticated users
      allow get, list: if isSignedIn();

      // Writable only by admins
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Defines rules for departments.
     * @path /departments/{departmentId}
     * @allow (get) Any authenticated user can read department data.
     * @allow (list) Any authenticated user can list department data.
     * @allow (create) Only admins can create department data.
     * @allow (update) Only admins can update department data.
     * @allow (delete) Only admins can delete department data.
     * @deny (create) Non-admin users cannot create department data.
     * @deny (update) Non-admin users cannot update department data.
     * @deny (delete) Non-admin users cannot delete department data.
     * @principle Publicly readable, admin-only writes.
     */
    match /departments/{departmentId} {
      // Readable by all authenticated users
      allow get, list: if isSignedIn();

      // Writable only by admins
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Defines rules for KPI categories.
     * @path /kpi_categories/{kpiCategoryId}
     * @allow (get) Any authenticated user can read KPI category data.
     * @allow (list) Any authenticated user can list KPI category data.
     * @allow (create) Only admins can create KPI category data.
     * @allow (update) Only admins can update KPI category data.
     * @allow (delete) Only admins can delete KPI category data.
     * @deny (create) Non-admin users cannot create KPI category data.
     * @deny (update) Non-admin users cannot update KPI category data.
     * @deny (delete) Non-admin users cannot delete KPI category data.
     * @principle Publicly readable, admin-only writes.
     */
    match /kpi_categories/{kpiCategoryId} {
      // Readable by all authenticated users
      allow get, list: if isSignedIn();

      // Writable only by admins
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Defines rules for the KPI catalog.
     * @path /kpi_catalog/{kpiId}
     * @allow (get) Any authenticated user can read KPI data.
     * @allow (list) Any authenticated user can list KPI data.
     * @allow (create) Only admins can create KPI data.
     * @allow (update) Only admins can update KPI data.
     * @allow (delete) Only admins can delete KPI data.
     * @deny (create) Non-admin users cannot create KPI data.
     * @deny (update) Non-admin users cannot update KPI data.
     * @deny (delete) Non-admin users cannot delete KPI data.
     * @principle Publicly readable, admin-only writes.
     */
    match /kpi_catalog/{kpiId} {
      // Readable by all authenticated users
      allow get, list: if isSignedIn();

      // Writable only by admins
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Defines rules for cascaded KPIs.
     * @path /cascaded_kpis/{cascadedKpiId}
     * @allow (get) Any authenticated user can read cascaded KPI data.
     * @allow (list) Any authenticated user can list cascaded KPI data.
     * @allow (create) Only managers or admins can create cascaded KPI data.
     * @allow (update) Only managers or admins can update cascaded KPI data.
     * @allow (delete) Only managers or admins can delete cascaded KPI data.
     * @deny (create) Non-manager and non-admin users cannot create cascaded KPI data.
     * @deny (update) Non-manager and non-admin users cannot update cascaded KPI data.
     * @deny (delete) Non-manager and non-admin users cannot delete cascaded KPI data.
     */
    match /cascaded_kpis/{cascadedKpiId} {
      // Readable by all authenticated users
      allow get, list: if isSignedIn();

      // Writable only by managers or admins
      allow create: if isManager() || isAdmin();
      allow update: if (isManager() || isAdmin()) && resource != null;
      allow delete: if (isManager() || isAdmin()) && resource != null;
    }

    /**
     * @description Defines rules for individual KPIs.
     * @path /individual_kpis/{individualKpiId}
     * @allow (get) Any authenticated user can read individual KPI data.
     * @allow (list) Any authenticated user can list individual KPI data.
     * @allow (create) Only managers or admins can create individual KPI data.
     * @allow (update) Only managers or admins can update individual KPI data.
     * @allow (delete) Only managers or admins can delete individual KPI data.
     * @deny (create) Non-manager and non-admin users cannot create individual KPI data.
     * @deny (update) Non-manager and non-admin users cannot update individual KPI data.
     * @deny (delete) Non-manager and non-admin users cannot delete individual KPI data.
     */
    match /individual_kpis/{individualKpiId} {
      // Readable by all authenticated users
      allow get, list: if isSignedIn();

      // Writable only by managers or admins
      allow create: if isManager() || isAdmin();
      allow update: if (isManager() || isAdmin()) && resource != null;
      allow delete: if (isManager() || isAdmin()) && resource != null;
    }

    /**
     * @description Defines rules for KPI submissions.
     * @path /kpi_submissions/{kpiSubmissionId}
     * @allow (get) Any authenticated user can read KPI submission data.
     * @allow (list) Any authenticated user can list KPI submission data.
     * @allow (create) Any authenticated user can create KPI submission data.
     * @allow (update) Any authenticated user can update KPI submission data.
     * @allow (delete) Any authenticated user can delete KPI submission data.
     * @deny (create) Non-authenticated users cannot create KPI submission data.
     * @deny (update) Non-authenticated users cannot update KPI submission data.
     * @deny (delete) Non-authenticated users cannot delete KPI submission data.
     */
    match /kpi_submissions/{kpiSubmissionId} {
      // Readable by all authenticated users
      allow get, list: if isSignedIn();

      // Writable by authenticated users
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Defines rules for KPI approvals.
     * @path /kpi_approvals/{kpiApprovalId}
     * @allow (get) Any authenticated user can read KPI approval data.
     * @allow (list) Any authenticated user can list KPI approval data.
     * @allow (create) Any authenticated user can create KPI approval data.
     * @allow (update) Any authenticated user can update KPI approval data.
     * @allow (delete) Any authenticated user can delete KPI approval data.
     * @deny (create) Non-authenticated users cannot create KPI approval data.
     * @deny (update) Non-authenticated users cannot update KPI approval data.
     * @deny (delete) Non-authenticated users cannot delete KPI approval data.
     */
    match /kpi_approvals/{kpiApprovalId} {
      // Readable by all authenticated users
      allow get, list: if isSignedIn();

      // Writable by authenticated users
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Defines rules for reports.
     * @path /reports/{reportId}
     * @allow (get) Any authenticated user can read report data.
     * @allow (list) Any authenticated user can list report data.
     * @allow (create) Any authenticated user can create report data.
     * @allow (update) Any authenticated user can update report data.
     * @allow (delete) Any authenticated user can delete report data.
     * @deny (create) Non-authenticated users cannot create report data.
     * @deny (update) Non-authenticated users cannot update report data.
     * @deny (delete) Non-authenticated users cannot delete report data.
     */
    match /reports/{reportId} {
      // Readable by all authenticated users
      allow get, list: if isSignedIn();

      // Writable by authenticated users
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Defines rules for global settings.
     * @path /settings/global
     * @allow (get) Any authenticated user can read global settings.
     * @allow (list) Listing is disabled to prevent accidental exposure.
     * @allow (create) Only admins can create global settings.
     * @allow (update) Only admins can update global settings.
     * @allow (delete) Only admins can delete global settings.
     * @deny (create) Non-admin users cannot create global settings.
     * @deny (update) Non-admin users cannot update global settings.
     * @deny (delete) Non-admin users cannot delete global settings.
     */
    match /settings/global {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Defines rules for monthly KPIs.
     * @path /monthly_kpis/{monthlyKpiId}
     * @allow (get) Any authenticated user can read monthly KPI data.
     * @allow (list) Any authenticated user can list monthly KPI data.
     * @allow (create) Only admins can create monthly KPI data.
     * @allow (update) Only admins can update monthly KPI data.
     * @allow (delete) Only admins can delete monthly KPI data.
     * @deny (create) Non-admin users cannot create monthly KPI data.
     * @deny (update) Non-admin users cannot update monthly KPI data.
     * @deny (delete) Non-admin users cannot delete monthly KPI data.
     */
    match /monthly_kpis/{monthlyKpiId} {
      // Readable by all authenticated users
      allow get, list: if isSignedIn();

      // Writable only by admins
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
  }
}