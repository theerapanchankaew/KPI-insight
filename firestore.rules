/**
 * @file Firestore Security Rules
 * @description This ruleset enforces role-based access control and data ownership for the KPI Dashboard application.
 *
 * Core Philosophy:
 *  - Authenticated users can read public data.
 *  - Data modification is restricted based on user roles and ownership.
 *  - Admin users have broad access to manage data.
 *
 * Data Structure:
 *  - User profiles are stored under `/users/{userId}` and are primarily accessible to the user themselves.
 *  - Employee, Department, KPI Category, KPI Catalog, and Monthly KPI data are stored in top-level collections and are readable by all authenticated users.
 *  - Other collections, like KPI Submissions and Approvals, might have more complex access patterns defined by the rules.
 *
 * Key Security Decisions:
 *  - User listing is denied to prevent unauthorized access to user data.
 *  - The `settings/global` document is readable by all authenticated users but writable only by admins.
 *  - Data validation is limited to essential fields for authorization and relational integrity during the prototyping phase.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (get, update, delete) if request.auth.uid == userId
     * @allow (create) if request.auth.uid == request.resource.data.id
     * @deny (get, update, delete) if request.auth.uid != userId
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows all authenticated users to read employee data; write access is restricted to admins.
     * @path /employees/{employeeId}
     * @allow (get, list) if isSignedIn()
     * @allow (create, update, delete) if isAdmin()
     * @deny (create, update, delete) if !isAdmin()
     * @principle Grants public read access but restricts write access to admins.
     */
    match /employees/{employeeId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Allows all authenticated users to read department data; write access is restricted to admins.
     * @path /departments/{departmentId}
     * @allow (get, list) if isSignedIn()
     * @allow (create, update, delete) if isAdmin()
     * @deny (create, update, delete) if !isAdmin()
     * @principle Grants public read access but restricts write access to admins.
     */
    match /departments/{departmentId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Allows all authenticated users to read KPI category data; write access is restricted to admins.
     * @path /kpi_categories/{kpiCategoryId}
     * @allow (get, list) if isSignedIn()
     * @allow (create, update, delete) if isAdmin()
     * @deny (create, update, delete) if !isAdmin()
     * @principle Grants public read access but restricts write access to admins.
     */
    match /kpi_categories/{kpiCategoryId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Allows all authenticated users to read KPI catalog data; write access is restricted to admins.
     * @path /kpi_catalog/{kpiId}
     * @allow (get, list) if isSignedIn()
     * @allow (create, update, delete) if isAdmin()
     * @deny (create, update, delete) if !isAdmin()
     * @principle Grants public read access but restricts write access to admins.
     */
    match /kpi_catalog/{kpiId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Allows all authenticated users to read cascaded KPI data; write access is restricted to managers and admins.
     * @path /cascaded_kpis/{cascadedKpiId}
     * @allow (get, list) if isSignedIn()
     * @allow (create, update, delete) if isManager() || isAdmin()
     * @deny (create, update, delete) if !isManager() && !isAdmin()
     * @principle Grants public read access but restricts write access to managers and admins.
     */
    match /cascaded_kpis/{cascadedKpiId} {
      allow get, list: if isSignedIn();
      allow create: if isManager() || isAdmin();
      allow update: if (isManager() || isAdmin()) && resource != null;
      allow delete: if (isManager() || isAdmin()) && resource != null;
    }

    /**
     * @description Allows the assigned user and their manager to read individual KPI data. Manager/Admin can write. Employee can update status.
     * @path /individual_kpis/{individualKpiId}
     * @allow (get, list) if isEmployee(resource.data.employeeId) || isManager()
     * @allow (create, update, delete) if isManager() || isAdmin()
     * @deny (create, update, delete) if !isManager() && !isAdmin()
     * @principle Grants read access to specific users and write access to managers and admins.
     */
    match /individual_kpis/{individualKpiId} {
      allow get: if isEmployee(resource.data.employeeId) || isManager();
      allow list: if isManager(); // Managers can list all individual KPIs
      allow create: if isManager() || isAdmin();
      allow update: if (isManager() || isAdmin()) && resource != null;
      allow delete: if (isManager() || isAdmin()) && resource != null;
    }

    /**
     * @description Allows the submitting user and their manager to read KPI submission data.
     * @path /kpi_submissions/{kpiSubmissionId}
     * @allow (get, list) if isOwner(resource.data.submittedByUserId) || isManager()
     * @allow (create, update, delete) if isOwner(resource.data.submittedByUserId)
     * @deny (create, update, delete) if !isOwner(resource.data.submittedByUserId)
     * @principle Grants read access to specific users and restricts write access to the owner.
     */
    match /kpi_submissions/{kpiSubmissionId} {
      allow get: if isOwner(resource.data.submittedByUserId) || isManager();
      allow list: if isManager();
      allow create: if isOwner(request.resource.data.submittedByUserId) && request.resource.data.submittedByUserId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.submittedByUserId);
      allow delete: if isExistingOwner(resource.data.submittedByUserId);
    }

    /**
     * @description Allows involved parties to read KPI approval records.
     * @path /kpi_approvals/{kpiApprovalId}
     * @allow (get, list) if isSignedIn()
     * @allow (create, update, delete) if isAdmin()
     * @deny (create, update, delete) if !isAdmin()
     * @principle Grants read access to all, but write access only to admins.
     */
    match /kpi_approvals/{kpiApprovalId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Allows read access to reports for all authenticated users. Write access is restricted and requires further implementation.
     * @path /reports/{reportId}
     * @allow (get, list) if isSignedIn()
     * @allow create, update, delete: if false; // TODO: Implement write rules based on roles and report ownership.
     * @principle Grants public read access but requires further definition of write access.
     */
    match /reports/{reportId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows all authenticated users to read global settings; write access is restricted to admins.
     * @path /settings/global
     * @allow (get) if isSignedIn()
     * @allow (create, update, delete) if isAdmin()
     * @deny (create, update, delete) if !isAdmin()
     * @principle Grants public read access but restricts write access to admins.
     */
    match /settings/global {
      allow get: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Allows all authenticated users to read monthly KPI data; write access is restricted to admins.
     * @path /monthly_kpis/{monthlyKpiId}
     * @allow (get, list) if isSignedIn()
     * @allow (create, update, delete) if isAdmin()
     * @deny (create, update, delete) if !isAdmin()
     * @principle Grants public read access but restricts write access to admins.
     */
    match /monthly_kpis/{monthlyKpiId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

    function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }

  function isAdmin() {
        return request.auth.token.role == 'Admin';
  }

    function isManager() {
        return request.auth.token.role == 'Manager';
  }

  function isEmployee(employeeId) {
        return request.auth.uid == employeeId;
  }
}