/**
 * @fileoverview Firestore Security Rules for the KPI Dashboard application.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on user roles and ownership.
 * It implements a combination of role-based access control (RBAC) and owner-based access control.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles, accessible only to the user themselves and admins.
 * - /employees/{employeeId}: Stores public employee data, readable by all authenticated users, writable by admins.
 * - /departments/{departmentId}: Stores department information, readable by all authenticated users, writable by admins.
 * - /kpi_categories/{kpiCategoryId}: Stores KPI categories, readable by all authenticated users, writable by admins.
 * - /kpi_catalog/{kpiId}: Stores the master list of KPIs, readable by all authenticated users, writable by admins.
 * - /cascaded_kpis/{cascadedKpiId}: Stores KPIs cascaded to departments, readable by all authenticated users, writable by managers/admins.
 * - /individual_kpis/{individualKpiId}: Stores KPIs assigned to individual employees. Readable by the assigned user and their manager. Writable by manager/admin. Status updatable by employee.
 * - /kpi_submissions/{kpiSubmissionId}: Stores KPI submission data. Includes `submittedByUserId` for ownership checks. Readable by submitter and their manager.
 * - /kpi_approvals/{kpiApprovalId}: Stores KPI approval records. Includes `approvedByUserId` for tracking approvers. Readable by involved parties.
 * - /reports/{reportId}: Stores performance reports.
 * - /settings/global: Stores global application settings, readable by all authenticated users, writable by admins.
 * - /monthly_kpis/{monthlyKpiId}: Stores monthly KPI data. Readable by all authenticated users, writable by admins.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied to prevent unauthorized access to user data. Only admins can list users.
 * - Public read access is granted to certain collections like 'employees', 'kpi_catalog', 'departments', 'kpi_categories', 'cascaded_kpis', and 'monthly_kpis', assuming the data within is intended for general consumption.
 * - Role-based access is managed via custom claims.
 *
 * Denormalization for Authorization:
 * - The `KpiSubmission` entity uses `submittedByUserId` to simplify ownership checks, avoiding costly `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Authentication is required for most operations.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user's ID matches the provided userId.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces user-specific access control.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an admin.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces role-based access control.
     */
    function isAdmin() {
      return request.auth.token.role == 'Admin';
    }

    /**
     * @description Checks if the user is a manager.
     * @path N/A
     */
    function isManager() {
        return request.auth.token.role == 'Manager';
    }

    /**
     * @description Checks if the user is an existing owner (isSignedIn, isOwner, and document exists).
     */
    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Rule for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (get) User with ID 'user123' reading their own profile.
     * @allow (create) User with ID 'user123' creating their own profile.
     * @allow (update) User with ID 'user123' updating their own profile.
     * @deny (get) User with ID 'user456' reading the profile of user 'user123'.
     * @deny (create) User with ID 'user456' creating the profile of user 'user123'.
     * @deny (update) User with ID 'user456' updating the profile of user 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow list: if isAdmin();
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for the /employees/{employeeId} collection.
     * @path /employees/{employeeId}
     * @allow (get, list) Any authenticated user can read employee data.
     * @allow (create, update, delete) Only admins can modify employee data.
     * @deny (create, update, delete) Non-admin users cannot modify employee data.
     * @principle Role-based access control for writes, public read access.
     */
    match /employees/{employeeId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rule for the /departments/{departmentId} collection.
     * @path /departments/{departmentId}
     * @allow (get, list) Any authenticated user can read department data.
     * @allow (create, update, delete) Only admins can modify department data.
     * @deny (create, update, delete) Non-admin users cannot modify department data.
     * @principle Role-based access control for writes, public read access.
     */
    match /departments/{departmentId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rule for the /kpi_categories/{kpiCategoryId} collection.
     * @path /kpi_categories/{kpiCategoryId}
     * @allow (get, list) Any authenticated user can read KPI category data.
     * @allow (create, update, delete) Only admins can modify KPI category data.
     * @deny (create, update, delete) Non-admin users cannot modify KPI category data.
     * @principle Role-based access control for writes, public read access.
     */
    match /kpi_categories/{kpiCategoryId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rule for the /kpi_catalog/{kpiId} collection.
     * @path /kpi_catalog/{kpiId}
     * @allow (get, list) Any authenticated user can read KPI data.
     * @allow (create, update, delete) Only admins can modify KPI data.
     * @deny (create, update, delete) Non-admin users cannot modify KPI data.
     * @principle Role-based access control for writes, public read access.
     */
    match /kpi_catalog/{kpiId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rule for the /cascaded_kpis/{cascadedKpiId} collection.
     * @path /cascaded_kpis/{cascadedKpiId}
     * @allow (get, list) Any authenticated user can read cascaded KPI data.
     * @allow (create, update, delete) Only managers and admins can modify cascaded KPI data.
     */
    match /cascaded_kpis/{cascadedKpiId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin() || isManager();
      allow update: if (isAdmin() || isManager()) && resource != null;
      allow delete: if (isAdmin() || isManager()) && resource != null;
    }

    /**
     * @description Rule for the /individual_kpis/{individualKpiId} collection.
     * @path /individual_kpis/{individualKpiId}
     *
     */
    match /individual_kpis/{individualKpiId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin() || isManager();
      allow update: if (isAdmin() || isManager()) && resource != null;
      allow delete: if (isAdmin() || isManager()) && resource != null;
    }

    /**
     * @description Rule for the /kpi_submissions/{kpiSubmissionId} collection.
     * @path /kpi_submissions/{kpiSubmissionId}
     */
    match /kpi_submissions/{kpiSubmissionId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Rule for the /kpi_approvals/{kpiApprovalId} collection.
     * @path /kpi_approvals/{kpiApprovalId}
     */
    match /kpi_approvals/{kpiApprovalId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Rule for the /reports/{reportId} collection.
     * @path /reports/{reportId}
     */
    match /reports/{reportId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rule for the /settings/global document.
     * @path /settings/global
     */
    match /settings/global {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rule for the /monthly_kpis/{monthlyKpiId} collection.
     * @path /monthly_kpis/{monthlyKpiId}
     */
    match /monthly_kpis/{monthlyKpiId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
  }
}