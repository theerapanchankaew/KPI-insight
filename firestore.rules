/**
 * @fileoverview Firestore Security Rules for the KPI Management Application.
 *
 * Core Philosophy:
 * This ruleset employs a hybrid security model. User profiles are strictly controlled
 * with owner-only access. KPI data includes denormalized ownerId fields, enabling
 * fast and secure authorization checks. The KPI Catalog and Employee data are
 * publicly readable but write-protected, requiring an admin role (not yet implemented
 * in this initial prototyping phase, so writes are temporarily disabled).
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles.
 * - /departments/{departmentId}: Stores department information.
 * - /kpis/{kpiId}: Stores KPI data.
 * - /submissions/{submissionId}: Stores KPI submission data.
 * - /kpi_catalog/{kpiId}: Stores the catalog of all corporate KPIs.
 * - /employees/{employeeId}: Stores employee and organizational structure data.
 *
 * Key Security Decisions:
 * - User profiles are private and only accessible to the owning user.
 * - The kpi_catalog and employee collections are publicly readable. Writes are
 *   currently disabled for prototyping but will later require admin authentication.
 * - The rules prioritize authorization based on the 'ownerId' field in KPI documents.
 *
 * Denormalization for Authorization:
 * - The 'Kpi' entity includes the 'ownerId' field to enable direct authorization
 *   checks without requiring additional reads to other documents. This denormalization
 *   is crucial for efficient and scalable security rules.
 *
 * Structural Segregation:
 * - No structural segregation is currently employed. All collections are top-level.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profiles. Only the user can read or write their own profile.
     * @path /users/{userId}
     * @allow (create) User 'ggyIfmNNzMVOjxvaLSKVf3GV7C02' can create their own profile at /users/ggyIfmNNzMVOjxvaLSKVf3GV7C02.
     * @allow (get, update, delete) User 'ggyIfmNNzMVOjxvaLSKVf3GV7C02' can get, update, and delete their profile at /users/ggyIfmNNzMVOjxvaLSKVf3GV7C02.
     * @deny (create) User 'attackerId' cannot create a profile at /users/ggyIfmNNzMVOjxvaLSKVf3GV7C02.
     * @deny (get, update, delete) User 'attackerId' cannot read or modify the profile at /users/ggyIfmNNzMVOjxvaLSKVf3GV7C02.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines access rules for department data.  Currently, no specific restrictions
     * @path /departments/{departmentId}
     * @allow (get, list) Anyone can read department data.
     * @deny (create, update, delete) No one can create, update, or delete department data. Writes are disabled for this prototype.
     * @principle Restricts write access to department data during the prototyping phase.
     */
    match /departments/{departmentId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Secures KPI data.  Allows reads, but enforces ownership on writes
     * @path /kpis/{kpiId}
     * @allow (get, list) Anyone can read KPI data.
     *  @allow (create) User 'ggyIfmNNzMVOjxvaLSKVf3GV7C02' can create a KPI where request.resource.data.ownerId == 'ggyIfmNNzMVOjxvaLSKVf3GV7C02'
     * @allow (update, delete) User 'ggyIfmNNzMVOjxvaLSKVf3GV7C02' can update/delete a KPI where resource.data.ownerId == 'ggyIfmNNzMVOjxvaLSKVf3GV7C02'
     * @deny (create) User 'attackerId' cannot create a KPI with ownerId 'ggyIfmNNzMVOjxvaLSKVf3GV7C02'.
     * @deny (update, delete) User 'attackerId' cannot modify or delete a KPI owned by 'ggyIfmNNzMVOjxvaLSKVf3GV7C02'.
     * @principle Enforces ownership for KPI writes and allows public reads.
     */
    match /kpis/{kpiId} {
      allow get, list: if true;
      allow create: if request.resource.data.ownerId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.ownerId);
      allow delete: if isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Defines access rules for KPI submission data.
     * @path /submissions/{submissionId}
     * @allow (get, list) Anyone can read submission data.
     * @deny (create, update, delete) No one can create, update, or delete submission data. Writes are disabled for this prototype.
     * @principle Restricts write access to KPI submission data during the prototyping phase.
     */
    match /submissions/{submissionId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Defines access rules for KPI catalog data.
     * @path /kpi_catalog/{kpiId}
     * @allow (get, list) Anyone can read KPI catalog data.
     * @deny (create, update, delete) No one can create, update, or delete KPI catalog data. Writes are disabled for this prototype.
     * @principle Restricts write access to the KPI catalog data during the prototyping phase.
     */
    match /kpi_catalog/{kpiId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Defines access rules for employee data.
     * @path /employees/{employeeId}
     * @allow (get, list) Anyone can read employee data.
     * @deny (create, update, delete) No one can create, update, or delete employee data. Writes are disabled for this prototype.
     * @principle Restricts write access to employee data during the prototyping phase.
     */
    match /employees/{employeeId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}