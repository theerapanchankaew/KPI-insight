/**
 * @fileoverview Firestore Security Rules for the KPI Dashboard application.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on user roles and ownership.
 * It leverages Firebase Authentication to verify user identity and enforces
 * granular permissions for reading and writing data.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles. Access is restricted to the user themselves (owner) or admins.
 * - /employees/{employeeId}: Stores public employee data, readable by all authenticated users but writable only by admins.
 * - /departments/{departmentId}, /kpi_categories/{kpiCategoryId}, /kpi_catalog/{kpiId}:
 *   Store organizational data readable by all authenticated users, writable only by admins.
 * - /kpi_submissions/{kpiSubmissionId}: Stores KPI submissions. Access is based on the `submittedByUserId` and role.
 * - /kpi_approvals/{kpiApprovalId}: Stores KPI approvals. Access is based on the `approvedByUserId` and role.
 * - /reports/{reportId}: Stores performance reports.
 * - /settings/global: Stores global application settings, readable by all authenticated users, writable only by admins.
 * - /monthly_kpis/{monthlyKpiId}: Stores monthly corporate KPI data, readable by all authenticated users, writable only by admins.
 *
 * Key Security Decisions:
 * - Listing of the `/users` collection is explicitly denied to prevent unauthorized data exposure.
 * - Public read access is granted to specific collections (e.g., `/employees`, `/kpi_catalog`) to enable core application functionality for all authenticated users.
 * - Role-based access control is implemented using custom claims for the 'role' field.
 * - Data validation is minimized for rapid prototyping, focusing on authorization and relational integrity.
 *
 * Denormalization for Authorization:
 *  - The `kpi_submissions` collection includes a `submittedByUserId` field to allow for ownership checks without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read/write their own profile data. Admins can read all profiles.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if isOwner(userId)
     * @allow (get) if isAdmin()
     * @deny (list) Always deny listing of users collection
     * @deny (create, update, delete) if !isOwner(userId)
     * @principle Enforces document ownership and admin overrides for user profiles.
     */
    match /users/{userId} {
      // Allow the user to read their own profile, or admins to read any profile.
      allow get: if isOwner(userId) || isAdmin();

      // Only allow the user to create their own profile.
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;

      // Only allow the user to update their own profile, and enforce immutability of the id field.
      allow update: if isOwner(userId) && resource.data.id == request.resource.data.id;

      // Only allow the user to delete their own profile.
      allow delete: if isOwner(userId) && resource != null;

      // Prevent listing of all users.
      allow list: if false;
    }

    /**
     * @description Allows any authenticated user to read employee data. Only admins can modify it.
     * @path /employees/{employeeId}
     * @allow (get, list) if isSignedIn()
     * @allow (create, update, delete) if isAdmin()
     * @deny (create, update, delete) if !isAdmin()
     * @principle Grants public read access to employee data, restricts writes to admins.
     */
    match /employees/{employeeId} {
      // Allow anyone to read employee data
      allow get, list: if isSignedIn();

      // Allow admins to create, update, and delete employee data
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Allows any authenticated user to read department data. Only admins can modify it.
     * @path /departments/{departmentId}
     * @allow (get, list) if isSignedIn()
     * @allow (create, update, delete) if isAdmin()
     * @deny (create, update, delete) if !isAdmin()
     * @principle Grants public read access to department data, restricts writes to admins.
     */
    match /departments/{departmentId} {
      // Allow anyone to read department data
      allow get, list: if isSignedIn();

      // Allow admins to create, update, and delete department data
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Allows any authenticated user to read KPI category data. Only admins can modify it.
     * @path /kpi_categories/{kpiCategoryId}
     * @allow (get, list) if isSignedIn()
     * @allow (create, update, delete) if isAdmin()
     * @deny (create, update, delete) if !isAdmin()
     * @principle Grants public read access to KPI category data, restricts writes to admins.
     */
    match /kpi_categories/{kpiCategoryId} {
      // Allow anyone to read KPI category data
      allow get, list: if isSignedIn();

      // Allow admins to create, update, and delete KPI category data
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Allows any authenticated user to read KPIs from the catalog. Only admins can modify the catalog.
     * @path /kpi_catalog/{kpiId}
     * @allow (get, list) if isSignedIn()
     * @allow (create, update, delete) if isAdmin()
     * @deny (create, update, delete) if !isAdmin()
     * @principle Grants public read access to the KPI catalog, restricts writes to admins.
     */
    match /kpi_catalog/{kpiId} {
      // Allow anyone to read KPI data
      allow get, list: if isSignedIn();

      // Allow admins to create, update, and delete KPI data
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Allows any authenticated user to read cascaded KPIs. Only managers and admins can modify them.
     * @path /cascaded_kpis/{cascadedKpiId}
     * @allow (get, list) if isSignedIn()
     * @allow (create, update, delete) if isAdmin() || isManager()
     * @deny (create, update, delete) if !isAdmin() && !isManager()
     * @principle Restricts writes to managers and admins.
     */
    match /cascaded_kpis/{cascadedKpiId} {
      // Allow anyone to read cascaded KPI data
      allow get, list: if isSignedIn();

      // Allow admins and managers to create, update, and delete cascaded KPI data
      allow create, update, delete: if isAdmin() || isManager();
    }

    /**
     * @description Allows assigned user and their manager to read individual KPIs. Manager/admin can write. Employee can update status.
     * @path /individual_kpis/{individualKpiId}
     */
    match /individual_kpis/{individualKpiId} {
      //TODO: Implement shared access based on the `employeeId`
      allow get: if isSignedIn() && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.employeeId == resource.data.employeeId || isAdmin() || isManager()); // TODO: Implement read access
      allow list: if isSignedIn(); // TODO: Implement list access
      allow create: if isAdmin() || isManager(); // TODO: Implement create access
      allow update: if isSignedIn() && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.employeeId == resource.data.employeeId || isAdmin() || isManager()); // TODO: Implement update access
      allow delete: if isAdmin(); // TODO: Implement delete access
    }

    /**
     * @description Allows users to read KPI submission data if they are the submitter or their manager.
     * @path /kpi_submissions/{kpiSubmissionId}
     */
    match /kpi_submissions/{kpiSubmissionId} {
      //TODO: Implement shared access based on the `submittedByUserId`
      allow get: if isSignedIn() && (resource.data.submittedByUserId == request.auth.uid || isAdmin() || isManager()); // TODO: Implement read access
      allow list: if isSignedIn(); // TODO: Implement list access
      allow create: if isSignedIn() && request.resource.data.submittedByUserId == request.auth.uid; // TODO: Implement create access
      allow update: if isSignedIn() && (resource.data.submittedByUserId == request.auth.uid || isAdmin() || isManager()); // TODO: Implement update access
      allow delete: if isAdmin(); // TODO: Implement delete access
    }

    /**
     * @description Allows users involved to read KPI approval records.
     * @path /kpi_approvals/{kpiApprovalId}
     */
    match /kpi_approvals/{kpiApprovalId} {
      //TODO: Implement shared access based on the `approvedByUserId`
      allow get: if isSignedIn() && (resource.data.approvedByUserId == request.auth.uid || isAdmin() || isManager()); // TODO: Implement read access
      allow list: if isSignedIn(); // TODO: Implement list access
      allow create: if isSignedIn() && request.resource.data.approvedByUserId == request.auth.uid; // TODO: Implement create access
      allow update: if isSignedIn() && (resource.data.approvedByUserId == request.auth.uid || isAdmin() || isManager()); // TODO: Implement update access
      allow delete: if isAdmin(); // TODO: Implement delete access
    }

    /**
     * @description Allows access to performance reports.
     * @path /reports/{reportId}
     */
    match /reports/{reportId} {
      allow get: if isSignedIn(); // TODO: Implement read access
      allow list: if isSignedIn(); // TODO: Implement list access
      allow create: if isSignedIn() && (isAdmin() || isVP()); // TODO: Implement create access
      allow update: if isSignedIn() && (isAdmin() || isVP()); // TODO: Implement update access
      allow delete: if isAdmin(); // TODO: Implement delete access
    }

    /**
     * @description Allows any authenticated user to read global app settings. Only admins can modify settings.
     * @path /settings/global
     * @allow (get) if isSignedIn()
     * @allow (create, update, delete) if isAdmin()
     * @deny (create, update, delete) if !isAdmin()
     * @principle Restricts writes to admins.
     */
    match /settings/global {
      // Allow anyone to read global settings
      allow get, list: if isSignedIn();

      // Allow admins to create, update, and delete global settings
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Allows any authenticated user to read monthly KPI data. Only admins can modify it.
     * @path /monthly_kpis/{monthlyKpiId}
     * @allow (get, list) if isSignedIn()
     * @allow (create, update, delete) if isAdmin()
     * @deny (create, update, delete) if !isAdmin()
     * @principle Grants public read access to monthly KPI data, restricts writes to admins.
     */
    match /monthly_kpis/{monthlyKpiId} {
      // Allow anyone to read monthly KPI data
      allow get, list: if isSignedIn();

      // Allow admins to create, update, and delete monthly KPI data
      allow create, update, delete: if isAdmin();
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth != null && request.auth.uid == userId;
  }

  function isAdmin() {
    return request.auth.token.role == 'Admin';
  }

    function isManager() {
    return request.auth.token.role == 'Manager';
  }

    function isVP() {
    return request.auth.token.role == 'VP';
  }

    function isAVP() {
    return request.auth.token.role == 'AVP';
  }

    function isEmployee() {
    return request.auth.token.role == 'Employee';
  }

  function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
  }
}