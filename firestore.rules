/**
 * @fileoverview Firestore Security Rules for KPI Insights application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and KPIs.
 * All user data is nested under /users/{userId}, ensuring that only the user can access their own profile.
 * KPIs are stored in a top-level /kpis/{kpiId} collection, but each KPI document contains an ownerId field that links it to a specific user.
 *
 * Data Structure:
 * /users/{userId}: Stores user profiles.
 * /departments/{departmentId}: Stores department information. Publicly readable.
 * /kpis/{kpiId}: Stores KPI data, with an ownerId field for authorization.
 * /submissions/{submissionId}: Stores KPI submission data.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user documents.
 * - Departments are publicly readable.
 * - KPIs can be created by anyone, but updates and deletes are restricted to the owner.
 * - Submissions can be created by anyone, but updates and deletes are restricted to the user who submitted.
 *
 * Denormalization for Authorization:
 * The KPI documents include an ownerId field to avoid needing to perform expensive `get()` operations
 * to determine ownership. This denormalization allows for simple and efficient security rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own profile with matching userId.
     *   request.auth.uid == 'user123' and request.resource.data.id == 'user123'
     * @allow (get, update, delete) - Authenticated user reads/updates/deletes their own profile.
     *   request.auth.uid == 'user123'
     * @deny (create) - Authenticated user tries to create a profile with a mismatched userId.
     *   request.auth.uid == 'user123' and request.resource.data.id == 'user456'
     * @deny (get, update, delete) - Authenticated user tries to access another user's profile.
     *   request.auth.uid == 'user456'
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read department data.
     * @path /departments/{departmentId}
     * @allow (get, list) - Any user can read department data.
     * @deny (create, update, delete) - No one can create, update, or delete department data.
     * @principle Allows public read access to departments, but restricts write access.
     */
    match /departments/{departmentId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read KPI data, but restricts creation to authenticated users and updates/deletes to the KPI owner.
     * @path /kpis/{kpiId}
     * @allow (get, list) - Any user can read KPI data.
     * @allow (create) - Authenticated user creates a KPI with their userId as the ownerId.
     *   request.auth.uid == 'user123' and request.resource.data.ownerId == 'user123'
     * @allow (update, delete) - Authenticated user updates/deletes a KPI they own.
     *   request.auth.uid == 'user123' and resource.data.ownerId == 'user123'
     * @deny (create) - Authenticated user tries to create a KPI with a mismatched ownerId.
     *   request.auth.uid == 'user123' and request.resource.data.ownerId == 'user456'
     * @deny (update, delete) - Authenticated user tries to update/delete a KPI they don't own.
     *   request.auth.uid == 'user456' and resource.data.ownerId == 'user123'
     * @principle Allows public read access, enforces document ownership for writes.
     */
    match /kpis/{kpiId} {
      function isSignedIn() {
          return request.auth != null;
      }

      function isOwner(ownerId) {
        return isSignedIn() && request.auth.uid == ownerId;
      }

      function isExistingOwner(ownerId) {
        return isOwner(ownerId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.ownerId);
      allow delete: if isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Allows any authenticated user to create a submission, but restricts updates/deletes to the user who submitted.
     * @path /submissions/{submissionId}
     * @allow (get, list) - Any user can read submission data.
     * @allow (create) - Authenticated user creates a submission with their userId as the submittedBy.
     *   request.auth.uid == 'user123' and request.resource.data.submittedBy == 'user123'
     * @allow (update, delete) - Authenticated user updates/deletes a submission they submitted.
     *   request.auth.uid == 'user123' and resource.data.submittedBy == 'user123'
     * @deny (create) - Authenticated user tries to create a submission with a mismatched submittedBy.
     *   request.auth.uid == 'user123' and request.resource.data.submittedBy == 'user456'
     * @deny (update, delete) - Authenticated user tries to update/delete a submission they didn't submit.
     *   request.auth.uid == 'user456' and resource.data.submittedBy == 'user123'
     * @principle Enforces document ownership for submissions.
     */
    match /submissions/{submissionId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isOwner(submittedBy) {
          return isSignedIn() && request.auth.uid == submittedBy;
        }

        function isExistingOwner(submittedBy) {
          return isOwner(submittedBy) && resource != null;
        }

        allow get, list: if true;
        allow create: if isSignedIn() && request.resource.data.submittedBy == request.auth.uid;
        allow update: if isExistingOwner(resource.data.submittedBy);
        allow delete: if isExistingOwner(resource.data.submittedBy);
    }
  }
}