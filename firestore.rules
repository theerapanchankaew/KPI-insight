/**
 * @fileoverview Firestore Security Rules for the KPI Management Application.
 *
 * Core Philosophy:
 * This ruleset employs a strict user-ownership model for user profiles
 * and public read with owner-only write for KPIs.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles.  Only the user can read/write their profile.
 * - /departments/{departmentId}: Stores department information.
 * - /kpis/{kpiId}: Stores KPI data, with owner-only write access.
 * - /submissions/{submissionId}: Stores KPI submission data.
 * - /kpi_catalog/{kpiId}: Stores the catalog of all corporate KPIs available for cascading.
 * - /employees/{employeeId}: Stores employee and organizational structure data.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Public read access is enabled for KPIs to facilitate data sharing and reporting,
 *   but write access is restricted to the KPI owner.
 * - All write operations require a verified user identity (authentication).
 * - Access control is enforced by checking the 'ownerId' field in KPI documents.
 *
 * Denormalization for Authorization:
 * The 'Kpi' entity includes an 'ownerId' field to simplify authorization checks,
 * avoiding the need for complex queries or additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) - User 'abc' can create their own profile if request.auth.uid == 'abc'.
     * @allow (get, update, delete) - User 'abc' can read/write their profile if request.auth.uid == 'abc'.
     * @deny (create, get, update, delete) - User 'def' cannot access user 'abc's profile.
     * @principle Enforces user-ownership; only the authenticated user can access their own profile.
     */
    match /users/{userId} {
      //function
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to department information.
     * @path /departments/{departmentId}
     * @allow (get, list) - Any signed-in user can read department information.
     * @deny (create, update, delete) - No one can create, update, or delete department information.
     * @principle Restricts modification of department data.
     */
    match /departments/{departmentId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to KPI data.
     * @path /kpis/{kpiId}
     * @allow (get, list) - Any user can read KPI data.
     * @allow (create) - A user can create a KPI if they are the owner.
     * @allow (update, delete) - Only the owner can update or delete a KPI.
     * @deny (create, update, delete) - A non-owner cannot modify KPI data.
     * @principle Enforces owner-only write access to KPIs.
     */
    match /kpis/{kpiId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isOwner() {
            return request.auth.uid == resource.data.ownerId;
        }

        allow get, list: if true;
        allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
        allow update: if isSignedIn() && getAfter().data.ownerId == request.auth.uid;
        allow delete: if isSignedIn() && getAfter().data.ownerId == request.auth.uid;
    }

    /**
     * @description Controls access to submission data.
     * @path /submissions/{submissionId}
     * @allow (get, list) - Any signed-in user can read submission data.
     * @allow (create) - Any signed-in user can create submission data. The 'submittedBy' must match their user id.
     * @allow (update, delete) - No one can update or delete submission data.
     * @principle Read access is public, create access is limited to signed-in user, and update/delete are denied.
     */
    match /submissions/{submissionId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.submittedBy == request.auth.uid;
      allow update, delete: if false;
    }

     /**
      * @description Controls access to KPI catalog data.
      * @path /kpi_catalog/{kpiId}
      * @allow (get, list) - Any signed-in user can read KPI catalog data.
      * @deny (create, update, delete) - No one can create, update, or delete KPI catalog data.
      * @principle Read access is public, and write operations are denied.
      */
    match /kpi_catalog/{kpiId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to employee data.
     * @path /employees/{employeeId}
     * @allow (get, list) - Any signed-in user can read employee data.
     * @deny (create, update, delete) - No one can create, update, or delete employee data.
     * @principle Read access is public, and write operations are denied.
     */
    match /employees/{employeeId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }
  }
}