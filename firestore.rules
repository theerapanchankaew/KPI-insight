/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model with ownership checks. Admins have full access, while users have limited access based on ownership.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles.
 * - /departments/{departmentId}: Stores department information.
 * - /kpis/{kpiId}: Stores KPI data, with 'ownerId' for ownership.
 * - /submissions/{submissionId}: Stores KPI submission data.
 * - /kpi_catalog/{kpiId}: Stores the catalog of KPIs.
 * - /employees/{employeeId}: Stores employee data.
 * - /settings/global: Stores global application settings.
 *
 * Key Security Decisions:
 * - Users can only read/write their own user profile.
 * - Departments, KPIs, Submissions, KPI Catalog and Employees are readable by everyone.
 * - Only admins can create, update, or delete Departments, KPIs, Submissions, KPI Catalog, and Employees.
 * - KPI writes are restricted to the owner.
 *
 * Denormalization for Authorization:
 * - KPIs include an `ownerId` field to simplify ownership checks without requiring additional `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @param {string} userId The user ID to check against the request.auth.uid.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     * @param {string} userId The user ID to check against the request.auth.uid.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource and it exists.
     * @param {string} userId The user ID to check against the resource data.
     * @returns {boolean} True if the user is the owner and resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has the Admin role.
     * @returns {boolean} True if the user has the Admin role, false otherwise.
     */
    function isAdmin() {
        return isSignedIn() && hasRole('Admin');
    }

    /**
     * @description Checks if the user has the specified role.
     * @param {string} role The role to check for.
     * @returns {boolean} True if the user has the specified role, false otherwise.
     */
    function hasRole(role) {
      return request.auth.token.role == role;
    }


    /**
     * @description Manages user profiles.  Users can only read/write their own profile. Admins can manage all profiles.
     * @path /users/{userId}
     * @allow (create) - User with matching {userId} can create their own profile.  auth.uid = userId
     * @allow (get, update, delete) - User with matching {userId} can get, update or delete their own profile. auth.uid = userId
     * @allow (list) - Admins can list all user profiles.
     * @deny (create) - User attempts to create a profile with a mismatched userId. auth.uid != userId
     * @deny (get, update, delete) - User attempts to read or modify another user's profile. auth.uid != userId
     * @principle Enforces user-ownership for profile management and restricts listing to admins.
     */
    match /users/{userId} {
      //Read Rules
      allow get: if isOwner(userId);
      allow list: if isAdmin();
      //Write Rules
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages department information. Only admins can create, update, or delete departments.
     * @path /departments/{departmentId}
     * @allow (get, list) - Anyone can read department information.
     * @allow (create, update, delete) - Only admins can create, update, or delete departments.
     * @deny (create, update, delete) - Non-admins attempt to create, update, or delete departments.
     * @principle Restricts department management to admins while allowing public read access.
     */
    match /departments/{departmentId} {
      //Read Rules
      allow get, list: if true;
      //Write Rules
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Manages KPI data. KPIs include an ownerId field to simplify ownership checks.
     * @path /kpis/{kpiId}
     * @allow (get, list) - Anyone can read KPI data.
     * @allow (create, update, delete) - Only the KPI owner or an admin can create, update, or delete KPIs.
     * @deny (create, update, delete) - Non-owners and non-admins attempt to create, update, or delete KPIs.
     * @principle Enforces ownership for KPI writes and restricts management to admins while allowing public read access.
     */
    match /kpis/{kpiId} {
      //Read Rules
      allow get, list: if true;
      //Write Rules
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isSignedIn() && (resource.data.ownerId == request.auth.uid || isAdmin()) && resource != null;
      allow delete: if isSignedIn() && (resource.data.ownerId == request.auth.uid || isAdmin()) && resource != null;
    }

    /**
     * @description Manages KPI submission data. Only admins can create, update, or delete submissions.
     * @path /submissions/{submissionId}
     * @allow (get, list) - Anyone can read submission data.
     * @allow (create, update, delete) - Only admins can create, update, or delete submissions.
     * @deny (create, update, delete) - Non-admins attempt to create, update, or delete submissions.
     * @principle Restricts submission management to admins while allowing public read access.
     */
    match /submissions/{submissionId} {
      //Read Rules
      allow get, list: if true;
      //Write Rules
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

     /**
      * @description Manages KPI catalog data. Only admins can create, update, or delete catalog entries.
      * @path /kpi_catalog/{kpiId}
      * @allow (get, list) - Anyone can read KPI catalog data.
      * @allow (create, update, delete) - Only admins can create, update, or delete KPI catalog entries.
      * @deny (create, update, delete) - Non-admins attempt to create, update, or delete KPI catalog entries.
      * @principle Restricts KPI catalog management to admins while allowing public read access.
      */
    match /kpi_catalog/{kpiId} {
      //Read Rules
      allow get, list: if true;
      //Write Rules
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Manages employee data. Only admins can create, update, or delete employee entries.
     * @path /employees/{employeeId}
     * @allow (get, list) - Anyone can read employee data.
     * @allow (create, update, delete) - Only admins can create, update, or delete employee entries.
     * @deny (create, update, delete) - Non-admins attempt to create, update, or delete employee entries.
     * @principle Restricts employee management to admins while allowing public read access.
     */
    match /employees/{employeeId} {
      //Read Rules
      allow get, list: if true;
      //Write Rules
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Manages global application settings. Only admins can update the settings.
     * @path /settings/global
     * @allow (get) - Anyone can read global settings.
     * @allow (update) - Only admins can update global settings.
     * @deny (create, delete) - No one can create or delete the settings document.
     * @principle Restricts settings management to admins while allowing public read access.  Singleton pattern enforced via create/delete denial.
     */
    match /settings/global {
       //Read Rules
      allow get: if true;
       //Write Rules
      allow create: if false;
      allow update: if isAdmin() && resource != null;
      allow delete: if false;
    }
  }
}