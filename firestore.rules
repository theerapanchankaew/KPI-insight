/**
 * @fileoverview Firestore Security Rules for the KPI Management Application.
 *
 * Core Philosophy:
 * This ruleset prioritizes strong authorization based on user identity and resource ownership.
 * It allows prototyping by omitting most data-shape validation, focusing instead on secure access control.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the user themselves.
 * - /departments/{departmentId}: Stores department information. (Currently open read access)
 * - /kpis/{kpiId}: Stores KPI data, with 'ownerId' for ownership-based access control.
 * - /submissions/{submissionId}: Stores KPI submission data. (Currently open read access)
 * - /kpi_catalog/{kpiId}: Stores a catalog of KPIs. Public read access, owner-only writes.
 * - /employees/{employeeId}: Stores employee and organizational structure data. (Currently open read access)
 *
 * Key Security Decisions:
 * - No user listing is allowed to prevent unauthorized data harvesting.
 * - Public read access is granted to /departments, /submissions, and /employees for prototyping convenience. This should be reviewed and restricted in a production environment.
 * - The 'kpi_catalog' collection implements a public read with owner-only write pattern, requiring an 'id' field to establish ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the user can read/write their own profile.
     * @path /users/{userId}
     * @allow (get, list, create, update, delete) if the user is the owner of the profile.
     * @deny (get, list, create, update, delete) if the user is not the owner of the profile.
     * @principle Enforces user-ownership for all operations on user profiles.
     */
    match /users/{userId} {
      //  users can only access their own user document
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }
      allow get: if isOwner(userId);
      allow list: if false; // No user listing
      allow create: if request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure department information.
     * @path /departments/{departmentId}
     * @allow (get, list) Public read access for prototyping.
     * @allow (create, update, delete) No write access.
     * @principle Demonstrates role-based access control (currently no role enforcement).
     */
    match /departments/{departmentId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Secure KPI data. Includes denormalized 'ownerId' for authorization independence.
     * @path /kpis/{kpiId}
     * @allow (get, list) Anyone can read or list KPIs.
     * @allow (create, update, delete) Only the owner can create, update, or delete KPIs.
     * @principle Enforces document ownership for writes.
     */
    match /kpis/{kpiId} {
       // kpis are accessible only to their owner
      function isOwner(ownerId) {
        return request.auth.uid == ownerId;
      }
      function isExistingOwner(ownerId) {
        return isOwner(ownerId) && resource.data != null;
      }
      allow get, list: if true;
      allow create: if request.auth.uid == request.resource.data.ownerId;
      allow update: if request.auth.uid == request.resource.data.ownerId && request.resource.data.ownerId == resource.data.ownerId;
      allow delete: if request.auth.uid == resource.data.ownerId;
    }

    /**
     * @description Secure KPI submission data.
     * @path /submissions/{submissionId}
     * @allow (get, list) Public read access for prototyping.
     * @allow (create, update, delete) No write access.
     */
    match /submissions/{submissionId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Secure the catalog of all corporate KPIs available for cascading.
     * @path /kpi_catalog/{kpiId}
     * @allow (get, list) Public read access to the KPI catalog.
     * @allow (create, update, delete) Only the owner can create, update, or delete KPIs in the catalog.
     * @principle Implements public read with owner-only write pattern.
     */
    match /kpi_catalog/{kpiId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(ownerId) {
        return request.auth.uid == ownerId;
      }
      function isExistingOwner(ownerId) {
        return isOwner(ownerId) && resource.data != null;
      }

      allow get, list: if true;
      allow create: if request.auth.uid == request.resource.data.ownerId;
      allow update: if request.auth.uid == request.resource.data.ownerId && request.resource.data.ownerId == resource.data.ownerId;
      allow delete: if request.auth.uid == resource.data.ownerId;
    }

    /**
     * @description Secure employee and organizational structure data.
     * @path /employees/{employeeId}
     * @allow (get, list) Public read access for prototyping.
     * @allow (create, update, delete) No write access.
     */
    match /employees/{employeeId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}