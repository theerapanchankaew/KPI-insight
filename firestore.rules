/**
 * @file Firebase Security Rules for KPI Dashboard Application
 *
 * @core_philosophy This ruleset enforces a combination of role-based and ownership-based access control.
 *   - Users can typically only read/write their own data.
 *   - Admins have broader access to manage users, departments, KPIs, and settings.
 *   - Some data, like employee directories and KPI catalogs, are publicly readable to authenticated users.
 *
 * @data_structure
 *   - User profiles are stored under `/users/{userId}`.
 *   - Employee data is stored under `/employees/{employeeId}`.
 *   - Department and KPI category data are stored under `/departments/{departmentId}` and `/kpi_categories/{kpiCategoryId}`, respectively.
 *   - KPI master list is stored under `/kpi_catalog/{kpiId}`.
 *   - Cascaded KPIs are stored under `/cascaded_kpis/{cascadedKpiId}`.
 *   - Individual KPIs are stored under `/individual_kpis/{individualKpiId}`.
 *   - KPI submissions are stored under `/kpi_submissions/{kpiSubmissionId}`.
 *   - KPI approvals are stored under `/kpi_approvals/{kpiApprovalId}`.
 *   - Reports are stored under `/reports/{reportId}`.
 *   - Global settings are stored under `/settings/global`.
 *   - Monthly KPI data is stored under `/monthly_kpis/{monthlyKpiId}`.
 *
 * @key_security_decisions
 *   - User listing is explicitly denied to prevent unauthorized access to user data.
 *   - Public read access is granted to collections like 'employees' and 'kpi_catalog'.
 *   - The default security posture for ambiguous relationships is strict owner-only access.
 *
 * @denormalization_for_authorization (Example: KpiSubmission)
 *   - The `KpiSubmission` entity includes a `submittedByUserId` field. This allows rules to quickly verify ownership without needing to perform additional `get()` operations.
 *   - Rules can then use `isOwner(resource.data.submittedByUserId)` to secure writes and potentially reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (get, list) if isOwner(userId)
     * @allow (create) if isOwner(userId) && request.resource.data.id == userId
     * @allow (update) if isExistingOwner(userId) && request.resource.data.id == resource.data.id
     * @deny (delete) if true
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree, and validates relational integrity between documents.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if false;
    }

    /**
     * @description Allows any authenticated user to read employee data, but only admins can write.
     * @path /employees/{employeeId}
     * @allow (get, list) if isSignedIn()
     * @allow (create, update, delete) if isAdmin()
     * @deny none
     * @principle Provides public read access to employee data for authenticated users and restricts write access to admins.
     */
    match /employees/{employeeId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Allows any authenticated user to read department data, but only admins can write.
     * @path /departments/{departmentId}
     * @allow (get, list) if isSignedIn()
     * @allow (create, update, delete) if isAdmin()
     * @deny none
     * @principle Provides public read access to department data for authenticated users and restricts write access to admins.
     */
    match /departments/{departmentId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Allows any authenticated user to read KPI category data, but only admins can write.
     * @path /kpi_categories/{kpiCategoryId}
     * @allow (get, list) if isSignedIn()
     * @allow (create, update, delete) if isAdmin()
     * @deny none
     * @principle Provides public read access to KPI category data for authenticated users and restricts write access to admins.
     */
    match /kpi_categories/{kpiCategoryId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Allows any authenticated user to read KPI catalog data, but only admins can write.
     * @path /kpi_catalog/{kpiId}
     * @allow (get, list) if isSignedIn()
     * @allow (create, update, delete) if isAdmin()
     * @deny none
     * @principle Provides public read access to KPI catalog data for authenticated users and restricts write access to admins.
     */
    match /kpi_catalog/{kpiId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Allows any authenticated user to read cascaded KPI data, but only managers/admins can write.
     * @path /cascaded_kpis/{cascadedKpiId}
     * @allow (get, list) if isSignedIn()
     * @allow (create, update, delete) if isManager() || isAdmin()
     * @deny none
     * @principle Provides public read access to cascaded KPI data for authenticated users and restricts write access to managers and admins.
     */
    match /cascaded_kpis/{cascadedKpiId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isManager() || isAdmin();
    }

    /**
     * @description Allows the assigned user and their manager to read individual KPI data. Managers/admins can write. Employees can update status.
     * @path /individual_kpis/{individualKpiId}
     */
    match /individual_kpis/{individualKpiId} {
      allow get: if isSignedIn() && (isOwner(resource.data.employeeId) || isManager());
      allow list: if isSignedIn(); // TODO: Secure listing based on user role/ownership
      allow create, update, delete: if isManager() || isAdmin();
    }

    /**
     * @description Allows the submitter and their manager to read KPI submission data.
     * @path /kpi_submissions/{kpiSubmissionId}
     */
    match /kpi_submissions/{kpiSubmissionId} {
      allow get: if isSignedIn() && (isOwner(resource.data.submittedByUserId) || isManager());
      allow list: if false; //The error message reported indicates the the list operation fails here. Listing should NOT be allowed by all users.
      allow create: if isSignedIn();
      allow update: if isSignedIn() && (isOwner(resource.data.submittedByUserId) || isManager());
      allow delete: if false;
    }

    /**
     * @description Allows involved parties to read KPI approval records.
     * @path /kpi_approvals/{kpiApprovalId}
     */
    match /kpi_approvals/{kpiApprovalId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn(); // TODO: Secure listing based on user role/ownership
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows access control for performance reports.
     * @path /reports/{reportId}
     */
    match /reports/{reportId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn(); // TODO: Secure listing based on user role/ownership
      allow create: if isManager() || isAdmin();
      allow update: if isManager() || isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows any authenticated user to read global application settings, but only admins can write.
     * @path /settings/global
     */
    match /settings/global {
      allow get: if isSignedIn();
      allow list: if false;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Allows any authenticated user to read monthly KPI data, but only admins can write.
     * @path /monthly_kpis/{monthlyKpiId}
     */
    match /monthly_kpis/{monthlyKpiId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    // ---- Helper functions ----

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param {string} userId - The user ID to check against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

   /**
     * @description Checks if the user is the owner of the resource and if the resource exists.
     * @param {string} userId - The user ID to check against.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has the Admin role.
     * @return {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return isSignedIn() && request.auth.token.role == 'Admin';
    }

    /**
     * @description Checks if the user has the Manager role.
     * @return {boolean} True if the user is a manager, false otherwise.
     */
    function isManager() {
      return isSignedIn() && (request.auth.token.role == 'Manager' || request.auth.token.role == 'VP' || request.auth.token.role == 'AVP');
    }
  }
}